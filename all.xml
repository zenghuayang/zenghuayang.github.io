<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>obsidian 做旅游攻略在地图上标记</title>
      <link href="/posts/ab62cfc5.html"/>
      <url>/posts/ab62cfc5.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在地图标记出行的地点，做旅游攻略，美食地图，在外面拍了很多照片，都可以明确的在地图上标记出来</p><h1 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol><li>科学上网插件市场搜索下载</li><li>本地安装 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/esm7/obsidian-map-view</span><br><span class="line">title: &quot;GitHub - esm7/obsidian-map-view: Interactive map view for Obsidian.md&quot;</span><br><span class="line">description: &quot;Interactive map view for Obsidian.md. Contribute to esm7/obsidian-map-view development by creating an account on GitHub.&quot;</span><br><span class="line">host: github.com</span><br><span class="line">favicon: https://github.githubassets.com/favicons/favicon.svg</span><br><span class="line">image: https://opengraph.githubassets.com/23d384b6c40977f425482326c28925c4ca5637ebf9b2885c9fffdf96742779a2/esm7/obsidian-map-view</span><br></pre></td></tr></table></figure></li></ol><h2 id="做上标记"><a href="#做上标记" class="headerlink" title="做上标记"></a>做上标记</h2><p>结合笔记属性，添加属性 location 标记上经纬度就可以在地图上展示出来</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">UID: 20250218081603 </span><br><span class="line">tags: </span><br><span class="line">date: 2025-02-18</span><br><span class="line"><span class="section">location: 28.467694,119.923249</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>打开左边工具栏的地图图标，就能看到标记的点<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202502181314143.png" alt="image.png|500"></p><h2 id="笔记快速标记"><a href="#笔记快速标记" class="headerlink" title="笔记快速标记"></a>笔记快速标记</h2><p>打开命令面板，选择 <code>Map View: add inline geolocation link</code><br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">浙江</span>](<span class="link">geo:</span>)</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202502181315354.png" alt="image.png|300"></p><p>这个快速标记，感觉没那么好用，采取了手动获取经纬度的方式。</p><h2 id="获取经纬度"><a href="#获取经纬度" class="headerlink" title="获取经纬度"></a>获取经纬度</h2><p>使用高德的地图获取<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url: https://lbs.amap.com/tools/picker</span><br><span class="line">title: &quot;坐标拾取器 | 高德地图API&quot;</span><br><span class="line">host: lbs.amap.com</span><br></pre></td></tr></table></figure></p><h2 id="更换地图源"><a href="#更换地图源" class="headerlink" title="更换地图源"></a>更换地图源</h2><p>当前默认的地图源是CartoDB，使用起来不习惯。要换成高德的地图源</p><p>进入插件的设置，找到 <code>Map sources</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202502181328016.png" alt="image.png|500"></p><p>新增地图源 <code>https://webrd02.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;</code></p><h2 id="更换大头针图标"><a href="#更换大头针图标" class="headerlink" title="更换大头针图标"></a>更换大头针图标</h2><p>进入插件的设置，找到 <code>Marke Icon Rules</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202502181317837.png" alt="image.png|500"></p><ul><li>设置图标的标签，在笔记的属性中要设置</li><li>设置图标的形状， <a href="https://fontawesome.com/">Font awesome</a>图标库中查找合适的</li><li>设置图标的颜色</li></ul><p>Font awesome 图标<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://fontawesome.com.cn/v5</span><br><span class="line">title: &quot;图标库v5 - FontAwesome 字体图标中文Icon&quot;</span><br><span class="line">description: &quot;Fontawesome中文版webfont,是一款基于css框架的网页字体图标库，它完全免费&quot;</span><br><span class="line">host: fontawesome.com.cn</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> obsidian </category>
          
      </categories>
      
      
        <tags>
            
            <tag> obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter H5 混编</title>
      <link href="/posts/307d4e5d.html"/>
      <url>/posts/307d4e5d.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 移动开发/XXX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter/iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github page绑定域名</title>
      <link href="/posts/647d9a95.html"/>
      <url>/posts/647d9a95.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>可以在搜索引擎中正常搜到博客的内容</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="绑定到百度中"><a href="#绑定到百度中" class="headerlink" title="绑定到百度中"></a>绑定到百度中</h2><p><em>不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://blog.csdn.net/weixin_45961774/article/details/108402406</span><br><span class="line">title: &quot;github.io绑定域名_githubio绑定域名-CSDN博客&quot;</span><br><span class="line">description: &quot;文章浏览阅读7.8k次，点赞9次，收藏20次。在此之前已在 GitHub Pages 搭建好了博客，且能够通过 github.io 进行访问。下面介绍一下如何将 github.io 与域名绑定：1. 购买域名可以在阿里云等购买。此处有一个阿里云域名1元购的活动可以白嫖了解一下。https://wanwang.aliyun.com/domain/1yuan2. 在 GitHub Pages 仓库添加 CNAME 文件并填入将绑定的域名填入的域名不要包含 https:// 和 www。3. 进入 GitHub Pages 仓库的 _githubio绑定域名&quot;</span><br><span class="line">host: blog.csdn.net</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 版本管理</title>
      <link href="/posts/51395e27.html"/>
      <url>/posts/51395e27.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Flutter SDK的版本管理成为了一个不可忽视的问题。不同项目可能需要依赖不同版本的Flutter SDK，频繁切换版本不仅耗时耗力，还容易引发版本冲突和兼容性问题</p><h2 id="FVM-管理版本"><a href="#FVM-管理版本" class="headerlink" title="FVM 管理版本"></a>FVM 管理版本</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>使用curl命令安装（适用于大多数Unix-like系统）</strong><br><code>curl -sL https://install.fvm.sh | bash</code></p><p><strong>使用Homebrew安装（适用于macOS用户）</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap leoafarias/fvm  </span><br><span class="line">brew install fvm  </span><br></pre></td></tr></table></figure></p><p><strong>使用Chocolatey安装（适用于Windows用户）</strong><br><code>choco install fvm</code></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p><strong>配置</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FVM_HOME=<span class="string">&quot;<span class="variable">$HOME</span>/fvm&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/fvm/default/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p><strong>查看已经安装的版本</strong><br><code>fvm list</code></p><p><strong>安装指定版本</strong><br><code>fvm install &lt;version&gt;</code></p><p><strong>切换指定版本</strong><br><code>fvm use &lt;version&gt;</code></p><p><strong>全局指定版本</strong>，影响该环境下的所有flutter项目<br><code>fvm global &lt;version&gt;</code></p><p><strong>为不同的flutter项目指定版本</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project1</span><br><span class="line">fvm use &lt;version&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project2</span><br><span class="line">fvm use &lt;version&gt;</span><br></pre></td></tr></table></figure><h2 id="手动管理版本"><a href="#手动管理版本" class="headerlink" title="手动管理版本"></a>手动管理版本</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://docs.flutter.cn/release/archive">Flutter SDK 归档列表</a></p><ol><li>下载不同的flutter版本</li><li>更新环境变量的PATH路径</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>v3.22.0: /path/flutter_3.22.0<br>v3.24.0: /path/flutter_3.24.0<br>v3.24.4: /path/flutter_3.24.4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment"># flutter</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:/path/flutter_3.22.0/bin&quot;</span></span><br></pre></td></tr></table></figure><p>如果不同的项目要求使用不同的版本，就要修改PATH变量</p><h2 id="git-切换版本"><a href="#git-切换版本" class="headerlink" title="git 切换版本"></a>git 切换版本</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>url: <a href="https://github.com/flutter/flutter.git">https://github.com/flutter/flutter.git</a></p><ol><li>使用git clone 项目到本地上</li><li>切换到不同的标签分支：git checkout tag_version</li></ol><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>这个方法也是需要设置 PATH 变量，只是不需要频繁修改，只需要设置 clone 项目的路径</p><p>Sourcetree git可视化客户端管理</p><h2 id="IED-配置版本路径"><a href="#IED-配置版本路径" class="headerlink" title="IED 配置版本路径"></a>IED 配置版本路径</h2><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>Android Studio —&gt; Settings —&gt; Languages &amp; Frameworks —&gt; Flutter —&gt; 指定版本的路径</p><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><p>修改 .vscode/settings.json 内容<br>  <code>&quot;dart.flutterSdkPath&quot;: &quot;/path/to/flutter_sdk&quot;</code></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><strong>通过 FVM 管理相对会比较便捷</strong></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 手势</title>
      <link href="/posts/b52de819.html"/>
      <url>/posts/b52de819.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Flutter 手势相关的学习</p><div class="table-container"><table><thead><tr><th>控件</th><th>常见手势事件</th><th>说明</th></tr></thead><tbody><tr><td><strong>GestureDetector</strong></td><td><code>onTap</code>, <code>onDoubleTap</code>, <code>onLongPress</code>, <code>onPanUpdate</code>, <code>onVerticalDragUpdate</code>, <code>onHorizontalDragUpdate</code>, <code>onScaleUpdate</code></td><td>支持多种手势，包括点击、双击、长按、拖动、缩放等。</td></tr><tr><td><strong>InkWell</strong></td><td><code>onTap</code></td><td>支持点击手势并提供水波纹点击效果，通常用于按钮等交互控件。</td></tr><tr><td><strong>Dismissible</strong></td><td><code>onDismissed</code></td><td>支持滑动手势，通常用于列表项的删除操作，滑动时会触发删除事件。</td></tr><tr><td><strong>Draggable</strong></td><td><code>onDragStarted</code>, <code>onDragUpdate</code>, <code>onDragEnd</code></td><td>支持拖动手势，允许用户拖动控件并提供拖动过程中的事件处理。</td></tr><tr><td><strong>RawGestureDetector</strong></td><td>自定义手势识别事件 (<code>TapGestureRecognizer</code>, <code>LongPressGestureRecognizer</code> 等)</td><td>提供底层手势处理，允许开发者完全自定义手势识别器。</td></tr><tr><td><strong>Listener</strong></td><td><code>onPointerDown</code>, <code>onPointerMove</code>, <code>onPointerUp</code></td><td>监听原始的指针事件，适用于捕捉触摸、按下、抬起等底层事件。</td></tr><tr><td><strong>ScaleGestureDetector</strong></td><td><code>onScaleUpdate</code>, <code>onScaleEnd</code></td><td>处理缩放手势，通常与 <code>GestureDetector</code> 一起使用来识别双指缩放操作。</td></tr><tr><td><strong>RawKeyboardListener</strong></td><td><code>onKey</code></td><td>用于监听键盘事件，适用于处理焦点变化和键盘输入。</td></tr></tbody></table></div><h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>它是主要的功能是用来监听屏幕触摸事件，取决于它的子组件区域范围，比如按下、移动、抬起、取消等操作时可以添加监听。</p><p>我们知道<code>Flutter</code>组件只有按钮才会有事件，如果在某个widget，自定义组件上添加事件那我就需要借助<code>Listener</code></p><h3 id="主要属性"><a href="#主要属性" class="headerlink" title="主要属性"></a>主要属性</h3><div class="table-container"><table><thead><tr><th>事件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>onPointerDown</td><td style="text-align:center">当指针按下时触发</td></tr><tr><td>onPointerMove</td><td style="text-align:center">当指针移动时触发</td></tr><tr><td>onPointerUp</td><td style="text-align:center">当指针抬起时触发</td></tr><tr><td>onPointerCancel</td><td style="text-align:center">手当指针操作被取消时触发（1.系统中断：例如来电、通知。 2.手势冲突。 3.多点触控事件，某个手指被系统取消）。清理状态和重置手势逻辑</td></tr><tr><td>onPointerHover</td><td style="text-align:center">当指针悬停时触发（适用于桌面应用</td></tr><tr><td>onPointerSignal</td><td style="text-align:center">当指针信号（如滚动）时触发</td></tr><tr><td>behavior</td><td style="text-align:center">指定当前层级的命中测试关系</td></tr></tbody></table></div><p><strong>简单使用：</strong><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListenerSimpleWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ListenerSimpleWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Listener(</span><br><span class="line">      child: ConstrainedBox(</span><br><span class="line">        constraints: BoxConstraints.tight(Size(<span class="number">200</span>, <span class="number">100</span>)),</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.grey,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      onPointerDown: (event) =&gt; <span class="built_in">print</span>(<span class="string">&quot;按下事件&quot;</span>),</span><br><span class="line">      onPointerUp: (event) =&gt; <span class="built_in">print</span>(<span class="string">&quot;抬起事件&quot;</span>),</span><br><span class="line">      onPointerMove: (event) =&gt; <span class="built_in">print</span>(<span class="string">&quot;移动事件&quot;</span>),</span><br><span class="line">      onPointerCancel: (event) =&gt; <span class="built_in">print</span>(<span class="string">&quot;取消事件&quot;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的事件流程：down &gt; move &gt; up (cancel)。</p><h3 id="PointerEvent"><a href="#PointerEvent" class="headerlink" title="PointerEvent"></a>PointerEvent</h3><p><strong>简单介绍：</strong><br>是 Flutter 中用于描述指针事件的基础类。它用于处理屏幕上的触摸、鼠标、触控笔等输入设备的交互。</p><p><strong>相关子类</strong></p><ol><li><code>PointerDownEvent</code><ul><li>当指针接触屏幕时触发。</li><li>常用于开始检测手势。</li></ul></li><li><code>PointerMoveEvent</code><ul><li>当指针在屏幕上移动时触发。</li><li>常用于处理拖动或滑动手势。</li></ul></li><li><code>PointerUpEvent</code><ul><li>当指针离开屏幕时触发。</li><li>常用于结束手势检测。</li></ul></li><li><code>PointerCancelEvent</code><ul><li>当系统取消指针事件时触发。</li><li>用于处理中断和重置手势状态。</li></ul></li></ol><p><strong>关键属性</strong></p><div class="table-container"><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>position</td><td>相对于全局坐标(左上角 （0,0）)，指针事件发生时的位置</td></tr><tr><td>localPosition</td><td>它是指针相对于当对于本身布局坐标的偏移</td></tr><tr><td>delta</td><td>指针移动的距离（仅适用于 <code>PointerMoveEvent</code>）</td></tr><tr><td>pressure</td><td>触摸压力（通常在 0.0 到 1.0 之间）。适用：1、压力感应绘画，压力越大，画笔越粗。2、交互的震动反馈。3、游戏反馈，速度和强度</td></tr><tr><td>orientation</td><td>指针的方向</td></tr><tr><td>timeStamp</td><td>事件发生的时间戳</td></tr><tr><td>pointer</td><td>指针的标识符，用于区分不同的触点</td></tr><tr><td>buttons</td><td>当前按下的按钮（适用于鼠标事件）</td></tr><tr><td>kind</td><td>指针的类型（如触摸、鼠标、触控笔）</td></tr></tbody></table></div><h3 id="behavior"><a href="#behavior" class="headerlink" title="behavior"></a>behavior</h3><p><strong>简单介绍</strong><br>有不同层级的组件重叠，决定当前组件如何响应命中测试，它的值类型为<code>HitTestBehavior</code>，这是一个枚举类，有三个枚举值</p><ul><li><p><code>HitTestBehavior.deferToChild</code>：默认值，设置当前Widget的可视化区域优先响应命中。但是同属于当前Widget的透明区域，<u>不能</u>响应命中测试。只能往当前组件的底级组件进行命中测试，决定父级Widget是否要响应点击。</p></li><li><p><code>HitTestBehavior.opaque</code>：当前Widget当作不透明进行命中测试，为了扩大当前Widget的点击区域，在当前Widget的可视化和透明区域，都可以响应命中测试。</p></li><li><p><code>HitTestBehavior.translucent</code>：设置当前当前Widget的可视化区域优先响应命中。但是同属于当前Widget的透明区域，<u>可以</u>响应命中测试，同时往底部组件继续进行命中测试，最后当前组件和底部组件都可以接收事件。</p></li></ul><p><strong>简单代码</strong><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListenerWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ListenerWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        Listener(</span><br><span class="line">          child: ConstrainedBox(</span><br><span class="line">            constraints: BoxConstraints.tight(Size(<span class="number">200</span>, <span class="number">100</span>)),</span><br><span class="line">            child: Container(</span><br><span class="line">              color: Colors.grey,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          onPointerDown: (event) =&gt; <span class="built_in">print</span>(<span class="string">&quot;底部组件被点击了&quot;</span>),</span><br><span class="line">        ),</span><br><span class="line">        Listener(</span><br><span class="line">          onPointerDown: (event) =&gt; <span class="built_in">print</span>(<span class="string">&quot;顶部文字组件点击&quot;</span>),</span><br><span class="line">          behavior: HitTestBehavior.opaque,</span><br><span class="line">          child: ConstrainedBox(</span><br><span class="line">            constraints: BoxConstraints.tight(Size(<span class="number">200</span>, <span class="number">100</span>)),</span><br><span class="line">            child: <span class="keyword">const</span> Center(</span><br><span class="line">              child: Text(</span><br><span class="line">                <span class="string">&quot;点击文字&quot;</span>,</span><br><span class="line">                style: TextStyle(color: Colors.white, fontSize: <span class="number">30</span>),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>分别点击文字区域和透明区域查看结果<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202411271456047.png" alt="image.png|500"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HitTestBehavior.deferToChild</span></span><br><span class="line">flutter: 顶部文字组件点击</span><br><span class="line">flutter: 底部组件被点击了</span><br><span class="line"></span><br><span class="line"><span class="comment">// HitTestBehavior.opaque</span></span><br><span class="line">flutter: 顶部文字组件点击</span><br><span class="line">flutter: 顶部文字组件点击</span><br><span class="line"></span><br><span class="line"><span class="comment">// HitTestBehavior.translucent</span></span><br><span class="line">flutter: 顶部文字组件点击</span><br><span class="line">flutter: 顶部文字组件点击</span><br><span class="line">flutter: 底部组件被点击了</span><br></pre></td></tr></table></figure><p><strong>忽略指针</strong>，阻止widget上触摸事件的响应，使用<code>IgnorePointer</code>和<code>AbsorbPointer</code></p><div class="table-container"><table><thead><tr><th>特性</th><th><strong>AbsorbPointer</strong></th><th><strong>IgnorePointer</strong></th></tr></thead><tbody><tr><td><strong>吸收触摸事件</strong></td><td>是的，阻止子部件响应触摸事件。</td><td>是的，阻止子部件响应触摸事件。</td></tr><tr><td><strong>事件是否传递给其他部件</strong></td><td>否，事件被吸收，不会传递到下层部件。</td><td>是的，事件可以传递给下层部件。</td></tr><tr><td><strong>适用场景</strong></td><td>禁用交互并阻止事件向下传播。</td><td>禁用交互并允许事件传递给下层部件。</td></tr><tr><td><strong>本身是否可以接收指针</strong></td><td>可以</td><td>不可以</td></tr><tr><td><strong>对 UI 树的影响</strong></td><td>仅影响当前子部件，触摸事件完全被阻止。</td><td>只阻止子部件的交互，但允许下层部件接收事件。</td></tr></tbody></table></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsorbPointerWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AbsorbPointerWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Listener(</span><br><span class="line">      child: AbsorbPointer(</span><br><span class="line">        child: Listener(</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.green,</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">100</span>,</span><br><span class="line">          ),</span><br><span class="line">          onPointerDown: (event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;点击子部件Widget&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      onPointerDown: (event) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;点击当前组件Widget&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>AbsorbPointer</code></strong> 最适用于你需要阻止部件交互并且不希望事件传递给下层部件的情况。</li><li><strong><code>IgnorePointer</code></strong> 适用于你希望阻止某个部件的交互，但又允许触摸事件传递给下层部件的场景。</li></ul><h3 id="原理相关"><a href="#原理相关" class="headerlink" title="原理相关"></a>原理相关</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://book.flutterchina.club/chapter8/hittest.html#_8-3-1-flutter-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B</span><br><span class="line">title: &quot;8.3 Flutter事件机制 | 《Flutter实战·第二版》&quot;</span><br><span class="line">host: book.flutterchina.club</span><br><span class="line">favicon: https://book.flutterchina.club/assets/img/logo.png</span><br></pre></td></tr></table></figure><h3 id="事件处理流程概述"><a href="#事件处理流程概述" class="headerlink" title="事件处理流程概述"></a><strong>事件处理流程概述</strong></h3><ol><li><strong>用户触摸事件</strong>：当用户在屏幕上触摸时，Flutter 会捕获该触摸事件并获取触摸点的屏幕坐标。</li><li><strong>坐标转换</strong>：Flutter 会将触摸点的屏幕坐标转换为相对于每个部件（Widget）的局部坐标。</li><li><strong>HitTest</strong> 检测：Flutter 会从根部件开始，遍历 Widget 树的每个 <code>RenderObject</code>，并判断触摸点是否命中当前部件。</li><li><strong>命中响应</strong>：如果一个部件（例如 <code>FlatButton</code>）被命中，它会响应事件，执行其回调函数（如 <code>onTap</code> 或 <code>onPressed</code>）。</li><li><strong>事件传播</strong>：如果部件没有响应事件，事件会继续向上传递到父部件，直到找到一个响应事件的部件或到达树的顶端。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------+</span><br><span class="line">|                  用户触摸事件                    |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|             获取触摸点的屏幕坐标                  |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|          转换为相对于各部件的局部坐标            |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|        从根部件开始，遍历 Widget 树              |</span><br><span class="line">|    (递归遍历所有 RenderObject 部件)              |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|        检查每个部件的 `hitTest` 方法              |</span><br><span class="line">|       (判断触摸点是否在该部件的区域内)            |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|  如果部件命中触摸点，记录命中信息并返回 `<span class="keyword">true</span>`    |</span><br><span class="line">|  (命中部件被加入 `HitTestResult` 中)             |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|       如果部件没有响应，事件传递给父级部件        |</span><br><span class="line">|        (继续调用父部件的 `hitTest` 方法)         |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|     如果命中部件有响应事件，执行事件回调         |</span><br><span class="line">|        (如 `onTap` 或 `onPressed`)               |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">                     |</span><br><span class="line">                     v</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">|             事件处理完毕，传播结束                |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="hit-test"><a href="#hit-test" class="headerlink" title="hit test"></a>hit test</h4><p>遍历渲染树对象（render object），从根节点开始从底部往顶部，对每一个对象进行命中测试（hit test），如果可以测试通过将结果添加到 <code>HitTestResult</code> 中<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202411271612685.png" alt="image.png|500"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _handlePointerEventImmediately(PointerEvent event) &#123;</span><br><span class="line"></span><br><span class="line">    HitTestResult? hitTestResult;</span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">is</span> PointerDownEvent || event <span class="keyword">is</span> PointerSignalEvent || event <span class="keyword">is</span> PointerHoverEvent || event <span class="keyword">is</span> PointerPanZoomStartEvent) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">      hitTestResult = HitTestResult();</span><br><span class="line">      hitTestInView(hitTestResult, event.position, event.viewId);</span><br><span class="line">      <span class="keyword">if</span> (event <span class="keyword">is</span> PointerDownEvent || event <span class="keyword">is</span> PointerPanZoomStartEvent) &#123;</span><br><span class="line">        _hitTests[event.pointer] = hitTestResult;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">is</span> PointerUpEvent || event <span class="keyword">is</span> PointerCancelEvent || event <span class="keyword">is</span> PointerPanZoomEndEvent) &#123;</span><br><span class="line">  </span><br><span class="line">      hitTestResult = _hitTests.remove(event.pointer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.down || event <span class="keyword">is</span> PointerPanZoomUpdateEvent) &#123;</span><br><span class="line"> </span><br><span class="line">      hitTestResult = _hitTests[event.pointer];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (hitTestResult != <span class="keyword">null</span> ||</span><br><span class="line">        event <span class="keyword">is</span> PointerAddedEvent ||</span><br><span class="line">        event <span class="keyword">is</span> PointerRemovedEvent) &#123;</span><br><span class="line">      dispatchEvent(event, hitTestResult);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="dispatch-event"><a href="#dispatch-event" class="headerlink" title="dispatch event"></a>dispatch event</h4><p>测试（hit test）完毕后，遍历 <code>HitTestResult</code>，执行每一个对象的 <code>handleEvent</code> 方法</p><h4 id="结束事件"><a href="#结束事件" class="headerlink" title="结束事件"></a>结束事件</h4><p>清空 <code>HitTestResult</code> 列表</p><p>例如：</p><p>命中测试：RenderView -&gt; 绿色render object -&gt; 文字 render object<br>分发事件：文字 -&gt; 绿色内容<br>所以顶部组件的事件会比底部组件的事件先响应接收事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url: https://juejin.cn/post/7410229183895060532?from=search-suggest#heading-7</span><br><span class="line">title: &quot;详细了解Flutter事件分发的工作原理Flutter 的手势事件分发系统是一个非常灵活且复杂的系统，它将用户的触摸、点 - 掘金&quot;</span><br><span class="line">description: &quot;Flutter 的手势事件分发系统是一个非常灵活且复杂的系统，它将用户的触摸、点击、滑动等输入事件传递给合适的 Widget，并在需要时触发手势回调。要深入理解这个过程，必须从 PointerEven&quot;</span><br><span class="line">host: juejin.cn</span><br><span class="line">favicon: https://lf-web-assets.juejin.cn/obj/juejin-web/xitu_juejin_web/static/favicons/favicon-32x32.png</span><br></pre></td></tr></table></figure><h2 id="GestureDetector"><a href="#GestureDetector" class="headerlink" title="GestureDetector"></a>GestureDetector</h2><p><code>GestureDetector</code>是对<code>Listener</code>的封装，提供非常多的手势,包括<strong>单击</strong>、<strong>双击</strong>、<strong>拖动</strong>、<strong>混合手势</strong>等。</p><h3 id="单击手势"><a href="#单击手势" class="headerlink" title="单击手势"></a>单击手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onTapDown</td><td>GestureTapDownCallback</td><td>手指按下时的回调函数</td></tr><tr><td>onTapUp</td><td>GestureTapUpCallback</td><td>手指松开时的回调函数</td></tr><tr><td>onTap</td><td>GestureTapCallback</td><td>手指点击时的回调函数</td></tr><tr><td>onTapCancel</td><td>GestureTapCancelCallback</td><td>手指取消点击时的回调函数</td></tr></tbody></table></div><h3 id="双击手势"><a href="#双击手势" class="headerlink" title="双击手势"></a>双击手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onDoubleTapDown</td><td>GestureTapDownCallback</td><td>手指按下时的回调函数</td></tr><tr><td>onDoubleTap</td><td>GestureTapCallback</td><td>手指双击时的回调函数</td></tr><tr><td>onDoubleTapCancel</td><td>GestureTapCancelCallback</td><td>手指取消时的回调函数</td></tr></tbody></table></div><h3 id="长按手势"><a href="#长按手势" class="headerlink" title="长按手势"></a>长按手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onLongPressDown</td><td>GestureLongPressDownCallback</td><td>手指按下去时的回调函数</td></tr><tr><td>onLongPressCancel</td><td>GestureLongPressCancelCallback</td><td>手指长按取消时的回调函数</td></tr><tr><td>onLongPress</td><td>GestureLongPressCallback</td><td>手指长按时的回调函数</td></tr><tr><td>onLongPressStart</td><td>GestureLongPressStartCallback</td><td>手指长按并开始拖动时的回调函数</td></tr><tr><td>onLongPressMoveUpdate</td><td>GestureLongPressMoveUpdateCallback</td><td>手指长按并移动时的回调函数</td></tr><tr><td>onLongPressUp</td><td>GestureLongPressUpCallback</td><td>手指长按并松开时的回调函数</td></tr><tr><td>onLongPressEnd</td><td>GestureLongPressEndCallback</td><td>手指长按结束拖动时的回调函数</td></tr></tbody></table></div><h3 id="垂直滑动手势"><a href="#垂直滑动手势" class="headerlink" title="垂直滑动手势"></a>垂直滑动手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onVerticalDragDown</td><td>GestureDragDownCallback</td><td>手指按下时的回调函数</td></tr><tr><td>onVerticalDragStart</td><td>GestureDragStartCallback</td><td>手指开始垂直滑动时的回调函数</td></tr><tr><td>onVerticalDragUpdate</td><td>GestureDragUpdateCallback</td><td>手指垂直滑动时的回调函数</td></tr><tr><td>onVerticalDragEnd</td><td>GestureDragEndCallback</td><td>手指垂直滑动结束时的回调函数</td></tr><tr><td>onVerticalDragCancel</td><td>GestureDragCancelCallback</td><td>手指垂直滑动取消时的回调函数</td></tr></tbody></table></div><h3 id="水平滑动手势"><a href="#水平滑动手势" class="headerlink" title="水平滑动手势"></a>水平滑动手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onHorizontalDragDown</td><td>GestureDragDownCallback</td><td>手指按下时的回调函数</td></tr><tr><td>onHorizontalDragStart</td><td>GestureDragStartCallback</td><td>手指开始水平滑动时的回调函数</td></tr><tr><td>onHorizontalDragUpdate</td><td>GestureDragUpdateCallback</td><td>手指水平滑动时的回调函数</td></tr><tr><td>onHorizontalDragEnd</td><td>GestureDragEndCallback</td><td>手指水平滑动结束时的回调函数</td></tr><tr><td>onHorizontalDragCancel</td><td>GestureDragCancelCallback</td><td>手指水平滑动取消时的回调函数</td></tr></tbody></table></div><h3 id="拖动手势"><a href="#拖动手势" class="headerlink" title="拖动手势"></a>拖动手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onPanDown</td><td>GestureDragDownCallback</td><td>手指按下时的回调函数</td></tr><tr><td>onPanStart</td><td>GestureDragStartCallback</td><td>手指开始拖动时的回调函数</td></tr><tr><td>onPanUpdate</td><td>GestureDragUpdateCallback</td><td>手指移动时的回调函数</td></tr><tr><td>onPanEnd</td><td>GestureDragEndCallback</td><td>手指抬起时的回调函数</td></tr><tr><td>onPanCancel</td><td>GestureDragCancelCallback</td><td>手指取消拖动时的回调函数</td></tr></tbody></table></div><h3 id="缩放手势"><a href="#缩放手势" class="headerlink" title="缩放手势"></a>缩放手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onScaleStart</td><td>GestureScaleStartCallback</td><td>开始缩放时的回调函数</td></tr><tr><td>onScaleUpdate</td><td>GestureScaleUpdateCallback</td><td>缩放移动时的回调函数</td></tr><tr><td>onScaleEnd</td><td>GestureScaleEndCallback</td><td>缩放结束时的回调函数</td></tr></tbody></table></div><h3 id="其他手势"><a href="#其他手势" class="headerlink" title="其他手势"></a>其他手势</h3><div class="table-container"><table><thead><tr><th>字段</th><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>onForcePressStart</td><td>GestureForcePressStartCallback</td><td>手指强制按下时的回调函数</td></tr><tr><td>onForcePressPeak</td><td>GestureForcePressPeakCallback</td><td>手指按压力度最大时的回调函数</td></tr><tr><td>onForcePressUpdate</td><td>GestureForcePressUpdateCallback</td><td>手指按下后移动时的回调函数</td></tr><tr><td>onForcePressEnd</td><td>GestureForcePressEndCallback</td><td>手指离开时的回调函数</td></tr></tbody></table></div><h3 id="手势冲突"><a href="#手势冲突" class="headerlink" title="手势冲突"></a>手势冲突</h3><p><strong>忽略指针</strong>，阻止widget上触摸事件的响应，使用<code>IgnorePointer</code>和<code>AbsorbPointer</code></p><div class="table-container"><table><thead><tr><th>特性</th><th><strong>AbsorbPointer</strong></th><th><strong>IgnorePointer</strong></th></tr></thead><tbody><tr><td><strong>吸收触摸事件</strong></td><td>是的，阻止子部件响应触摸事件。</td><td>是的，阻止子部件响应触摸事件。</td></tr><tr><td><strong>事件是否传递给其他部件</strong></td><td>否，事件被吸收，不会传递到下层部件。</td><td>是的，事件可以传递给下层部件。</td></tr><tr><td><strong>适用场景</strong></td><td>禁用交互并阻止事件向下传播。</td><td>禁用交互并允许事件传递给下层部件。</td></tr><tr><td><strong>本身是否可以接收指针</strong></td><td>可以</td><td>不可以</td></tr><tr><td><strong>对 UI 树的影响</strong></td><td>仅影响当前子部件，触摸事件完全被阻止。</td><td>只阻止子部件的交互，但允许下层部件接收事件。</td></tr></tbody></table></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsorbPointerWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AbsorbPointerWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Listener(</span><br><span class="line">      child: AbsorbPointer(</span><br><span class="line">        child: Listener(</span><br><span class="line">          child: Container(</span><br><span class="line">            color: Colors.green,</span><br><span class="line">            width: <span class="number">200</span>,</span><br><span class="line">            height: <span class="number">100</span>,</span><br><span class="line">          ),</span><br><span class="line">          onPointerDown: (event) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;点击子Widget&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      onPointerDown: (event) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;点击父Widget&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>AbsorbPointer</code></strong> 最适用于你需要阻止部件交互并且不希望事件传递给下层部件的情况。</li><li><strong><code>IgnorePointer</code></strong> 适用于你希望阻止某个部件的交互，但又允许触摸事件传递给下层部件的场景。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GestureArenaMember <span class="comment">// 竞技场参赛者 - 接口</span></span><br><span class="line">|-- _CombiningGestureArenaMember</span><br><span class="line">|-- GestureRecognizer <span class="comment">// 手势检测器</span></span><br><span class="line">    |-- MultiTapGestureRecognizer <span class="comment">//多次点击手势检测器</span></span><br><span class="line">    |-- MultiDragGestureRecognizer <span class="comment">//多指拖拽手势检测器 - 抽象类</span></span><br><span class="line">        |-- HorizontalMultiDragGestureRecognizer <span class="comment">//多指水平拖拽手势检测器</span></span><br><span class="line">        |-- ImmediateMultiDragGestureRecognizer  <span class="comment">//多指移动拖拽手势检测器</span></span><br><span class="line">|-- VerticalMultiDragGestureRecognizer  <span class="comment">//多指竖直拖拽手势检测器</span></span><br><span class="line">|-- DelayedMultiDragGestureRecognizer   <span class="comment">//多指延迟拖拽手势检测器</span></span><br><span class="line">    |-- DoubleTapGestureRecognizer <span class="comment">//双击手势检测器</span></span><br><span class="line">    |-- OneSequenceGestureRecognizer</span><br><span class="line">        |-- EagerGestureRecognizer</span><br><span class="line">        |-- ForcePressGestureRecognizer <span class="comment">//压力手势检测器</span></span><br><span class="line">        |-- ScaleGestureRecognizer <span class="comment">//缩放手势检测器</span></span><br><span class="line">|-- DragGestureRecognizer  <span class="comment">//拖拽手势检测器 - 抽象类</span></span><br><span class="line">    |-- VerticalDragGestureRecognizer <span class="comment">//竖直拖拽手势检测器</span></span><br><span class="line">            |-- HorizontalDragGestureRecognizer <span class="comment">//水平拖拽手势检测器</span></span><br><span class="line">    |-- PanGestureRecognizer <span class="comment">//移动拖拽手势检测器</span></span><br><span class="line">|-- PrimaryPointerGestureRecognizer</span><br><span class="line">    |-- LongPressGestureRecognizer <span class="comment">//长按手势检测器</span></span><br><span class="line">    |-- BaseTapGestureRecognizer</span><br><span class="line">        |-- TapGestureRecognizer <span class="comment">//单击手势检测器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="行程预约"><a href="#行程预约" class="headerlink" title="行程预约"></a>行程预约</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202411191116460.png" alt="image.png|200"></p><p>实现之前先找轮子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://flutter.ducafecat.com/pubs/syncfusion_flutter_datepicker-package-info</span><br><span class="line">title: &quot;日期和时间选择器, syncfusion_flutter_datepicker | flutter package&quot;</span><br><span class="line">description: &quot;日期和时间选择器, syncfusion_flutter_datepicker, Flutter日期范围选择器小部件，允许用户轻松选择日期或日期范围。它有四个内置视图，可以快速导航到所需的日期 Flutter Ducafecat 根据业务对海量优秀插件包进行分类方便查询。 Flutter Ducafecat 弥补了 pub.dev 站点的业务分类。&quot;</span><br><span class="line">host: flutter.ducafecat.com</span><br><span class="line">favicon: https://flutter.ducafecat.com/favicon.ico</span><br><span class="line">image: https://flutter.ducafecat.com/logo.svg</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url: https://flutter.syncfusion.com/?_gl=1*s5c9bw*_gcl_au*MTkzNzQzMTU3OC4xNzMxOTI2MDc2*_ga*OTQzNDA0MDQ5LjE3MTYzNTg4MzM.*_ga_41J4HFMX1J*MTczMTkyNjA3Ni4xNy4xLjE3MzE5MjYxNTYuMC4wLjA.#/event-calendar/getting-started</span><br><span class="line">title: &quot;Demos &amp; Examples of Syncfusion Flutter Widgets&quot;</span><br><span class="line">description: &quot;Explore the web demos and examples of the Syncfusion Flutter UI widgets like charts, calendar, gauge and more.&quot;</span><br><span class="line">host: flutter.syncfusion.com</span><br><span class="line">image: https://cdn.syncfusion.com/content/images/Flutter/Web_SB/flutter_logo_1.png</span><br></pre></td></tr></table></figure><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">book </span><br><span class="line">|-- booking_schedule_date.dart  <span class="comment">// 手势相关处理在这边</span></span><br><span class="line">|-- booking_schedule_enum.dart <span class="comment">// 相关的枚举类型</span></span><br><span class="line">|-- circle_painter.dart <span class="comment">// 绘制圆圈，用处不大</span></span><br><span class="line">|-- time_line_widget.dart <span class="comment">// 渲染时间轴的时间段、添加禁用的时间区域、处理用户点击事件并触发回调</span></span><br><span class="line">|-- time_region_widget.dart <span class="comment">// 时间轴选中区域、禁用时间区域</span></span><br><span class="line">|-- time_region.dart <span class="comment">// model</span></span><br></pre></td></tr></table></figure><h3 id="CustomPainter"><a href="#CustomPainter" class="headerlink" title="CustomPainter"></a>CustomPainter</h3><p>Flutter 中用于自定义绘制的一个类。你可以通过它在画布上绘制任意形状、图形或效果</p><h3 id="TimeLineWidget"><a href="#TimeLineWidget" class="headerlink" title="TimeLineWidget"></a>TimeLineWidget</h3><p><strong>主要逻辑</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeLineWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造方法</span></span><br><span class="line">  TimeLineWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.controller, <span class="comment">// 控制和监听时间轴的滚动行为</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.selectWidget,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.disableRegions,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.dayRegion,</span><br><span class="line">    <span class="keyword">this</span>.onTapCallback, </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.selectRegion,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> ScrollController controller; </span><br><span class="line">  <span class="keyword">final</span> Widget selectWidget;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;TimeRegion&gt; disableRegions;</span><br><span class="line">  <span class="keyword">final</span> TimeRegion dayRegion;</span><br><span class="line">  <span class="keyword">final</span> TimeRegion selectRegion;</span><br><span class="line">  <span class="keyword">final</span> BookingTapCallback? onTapCallback;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">int</span> count = dayRegion.getInterval() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 List.generate 创建每个时间段的时间项。每个时间段由 TimeLineItem 表示，它使用 CustomPaint 绘制时间段的线条和时间标签。</span></span><br><span class="line">    <span class="built_in">List</span> cells = <span class="built_in">List</span>.generate(count, (index) &#123;</span><br><span class="line">      <span class="keyword">return</span> TimeLineItem(</span><br><span class="line">        index: index + dayRegion.getStartIndex(),</span><br><span class="line">        cellHeight: dayRegion.cellHeight, </span><br><span class="line">        selectStartIndex: selectRegion.getStartIndex(),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 disableRegions 对时间范围进行调整。如果禁用的时间段超出可选范围（dayRegion），进行裁剪，确保禁用时间段在允许范围内。</span></span><br><span class="line">    <span class="built_in">List</span> disableCells = [];</span><br><span class="line">    disableRegions.forEach(</span><br><span class="line">      (time) &#123;</span><br><span class="line"></span><br><span class="line">、、、</span><br><span class="line"></span><br><span class="line">        disableCells.add(TimeRegionWidget(</span><br><span class="line">          timeRegion: time,</span><br><span class="line">          isAppointmentResize: <span class="keyword">false</span>,</span><br><span class="line">        ));</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SingleChildScrollView(</span><br><span class="line">        controller: controller,</span><br><span class="line">        child: GestureDetector(</span><br><span class="line">          onTapUp: (details) &#123;</span><br><span class="line">            <span class="comment">// 通过 GestureDetector 捕获点击事件，计算点击位置对应的时间索引（index）。点击的索引被回调到外部逻辑。</span></span><br><span class="line">            <span class="built_in">int</span> index =</span><br><span class="line">                ((details.localPosition.dy - <span class="number">20</span>) / dayRegion.cellHeight).ceil();</span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; index &lt;= <span class="number">48</span>) &#123;</span><br><span class="line">              onTapCallback!(index);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          child: Stack(</span><br><span class="line">            children: [</span><br><span class="line">              Column(children: [...cells]),</span><br><span class="line">              ...disableCells,</span><br><span class="line">              selectWidget,</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BookingScheduleDate"><a href="#BookingScheduleDate" class="headerlink" title="BookingScheduleDate"></a>BookingScheduleDate</h3><p><strong>主要属性分类和用途</strong></p><div class="table-container"><table><thead><tr><th><strong>属性名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong><code>disableRegions</code></strong></td><td><code>List&lt;TimeRegion&gt;</code></td><td>禁用的时间段列表，用于定义哪些时间段用户无法选择或操作。</td></tr><tr><td><strong><code>selectRegion</code></strong></td><td><code>TimeRegion</code></td><td>当前选中的时间段，包含起始时间、结束时间及相关状态。</td></tr><tr><td><strong><code>dayRegion</code></strong></td><td><code>TimeRegion</code></td><td>全天的时间范围，定义时间轴的整体范围。</td></tr><tr><td><strong><code>onBookingSelectback</code></strong></td><td><code>BookingSelectback</code></td><td>时间段选择后的回调，用于向父组件传递选中的时间段或状态变化。</td></tr></tbody></table></div><p><strong>布局相关属性</strong></p><div class="table-container"><table><thead><tr><th><strong>属性名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong><code>_selectBoxPosition</code></strong></td><td><code>double</code></td><td>选中区域的起始位置（Y 坐标）。基于时间轴的顶部偏移。</td></tr><tr><td><strong><code>_selectBoxHeight</code></strong></td><td><code>double</code></td><td>选中区域的高度，对应选中时间段的时长。</td></tr><tr><td><strong><code>_marginTop</code></strong></td><td><code>double</code></td><td>选中区域距离时间轴顶部的默认偏移量。</td></tr><tr><td><strong><code>_cellHeight</code></strong></td><td><code>double</code></td><td>每个时间单位（如一小时或半小时）在 UI 中对应的高度。</td></tr></tbody></table></div><p><strong>滚动控制相关属性</strong></p><div class="table-container"><table><thead><tr><th><strong>属性名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong><code>_controller</code></strong></td><td><code>ScrollController</code></td><td>时间轴的滚动控制器，用于同步滚动和拖动行为。</td></tr><tr><td><strong><code>_autoScrollTimer</code></strong></td><td><code>Timer?</code></td><td>用于处理拖动到边缘时的自动滚动逻辑。</td></tr><tr><td><strong><code>_scrollThreshold</code></strong></td><td><code>double</code></td><td>边界滚动的触发阈值。用户手势距离边缘的距离超过该值时开始滚动。</td></tr><tr><td><strong><code>_scrollSpeed</code></strong></td><td><code>double</code></td><td>自动滚动的速度，决定滚动的单位距离。</td></tr><tr><td><strong><code>_previousScrollOffset</code></strong></td><td><code>double</code></td><td>记录上一次滚动的位置，用于计算滚动的增量。</td></tr></tbody></table></div><p><strong>拖动状态相关属性</strong></p><div class="table-container"><table><thead><tr><th><strong>属性名称</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong><code>_isDraging</code></strong></td><td><code>bool</code></td><td>标记当前是否处于拖动状态。</td></tr><tr><td><strong><code>_isAppointmentResizeTop</code></strong></td><td><code>bool</code></td><td>标记是否正在调整顶部区域的大小。</td></tr><tr><td><strong><code>_isAppointmentResizeBottom</code></strong></td><td><code>bool</code></td><td>标记是否正在调整底部区域的大小。</td></tr></tbody></table></div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> BookingSelectback = <span class="keyword">void</span> <span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookingScheduleDate</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;TimeRegion&gt; disableRegions; <span class="comment">//禁用的时间段列表</span></span><br><span class="line">  <span class="keyword">final</span> TimeRegion selectRegion; <span class="comment">//当前选中的时间段</span></span><br><span class="line">  <span class="keyword">final</span> TimeRegion dayRegion; <span class="comment">//全天的时间范围</span></span><br><span class="line">  <span class="keyword">final</span> BookingSelectback onBookingSelectback; <span class="comment">//时间段选择的回调</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> BookingScheduleDate(</span><br><span class="line">      &#123;<span class="keyword">super</span>.key,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.disableRegions,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.selectRegion,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.dayRegion,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.onBookingSelectback&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  BookingScheduleDateState createState() =&gt; BookingScheduleDateState(</span><br><span class="line">      disableRegions, selectRegion, dayRegion, onBookingSelectback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookingScheduleDateState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BookingScheduleDate</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">late</span> ScrollController _controller;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> _marginTop = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">double</span> _selectBoxPosition = <span class="number">20</span>; <span class="comment">//当前选中区域的起始位置</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> _cellHeight = <span class="number">40</span>;</span><br><span class="line">  <span class="built_in">double</span> _selectBoxHeight = <span class="number">2</span> * <span class="number">40</span>; <span class="comment">//当前选中区域的高度</span></span><br><span class="line">  Timer? _autoScrollTimer; <span class="comment">//用于自动滚动的定时器</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> _scrollThreshold = <span class="number">80</span>; <span class="comment">//临界的滚动值</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> _scrollSpeed = <span class="number">5.0</span>; <span class="comment">// 控制滚动的单位距离</span></span><br><span class="line">  <span class="built_in">double</span> _previousScrollOffset = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">bool</span> _isDraging = <span class="keyword">false</span>; <span class="comment">//标记当前是否处于拖动状态</span></span><br><span class="line">  <span class="built_in">bool</span> _isAppointmentResizeTop = <span class="keyword">false</span>; <span class="comment">//标记是否正在调整顶部</span></span><br><span class="line">  <span class="built_in">bool</span> _isAppointmentResizeBottom = <span class="keyword">false</span>; <span class="comment">//标记是否正在底部的选中区域</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;TimeRegion&gt; disableRegions;</span><br><span class="line">  <span class="keyword">late</span> TimeRegion selectRegion;</span><br><span class="line">  <span class="keyword">final</span> TimeRegion dayRegion;</span><br><span class="line">  <span class="keyword">final</span> BookingSelectback onBookingSelectback;</span><br><span class="line"></span><br><span class="line">  BookingScheduleDateState(<span class="keyword">this</span>.disableRegions, <span class="keyword">this</span>.selectRegion,</span><br><span class="line">      <span class="keyword">this</span>.dayRegion, <span class="keyword">this</span>.onBookingSelectback);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">// _controller.addListener 绑定滚动事件，确保滚动时同步更新选中区域</span></span><br><span class="line">    _controller = ScrollController();</span><br><span class="line">    _controller.addListener(_syncSelectBoxPosition);</span><br><span class="line">    <span class="comment">// 选中区域的初始位置和高度</span></span><br><span class="line">    onSelectWidgetTime(selectRegion.startTime);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 释放滚动控制器和定时器资源。</span></span><br><span class="line">    _autoScrollTimer?.cancel();</span><br><span class="line">    _controller.removeListener(_syncSelectBoxPosition);</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> onSelectWidgetTime(<span class="built_in">DateTime</span> startTime) &#123;</span><br><span class="line">    </span><br><span class="line">    setState(() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">double</span> height = selectRegion.getInterval() * _cellHeight;</span><br><span class="line">      selectRegion.startTime = startTime;</span><br><span class="line">      selectRegion.height = height;</span><br><span class="line">      _selectBoxHeight = height;</span><br><span class="line">      _selectBoxPosition = selectRegion.getPosition();</span><br><span class="line"></span><br><span class="line">      _checkSelcteIsOverlap();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在拖动选中区域时，调用 _startAutoScroll 判断用户是否接近边缘，并触发滚动</span></span><br><span class="line">  <span class="keyword">void</span> _startAutoScroll(DragUpdateDetails details) &#123;</span><br><span class="line">    _autoScrollTimer?.cancel();</span><br><span class="line">    <span class="comment">// 定时器，16ms间隔自动滚动（60FPS，1秒60帧，1秒=1000毫秒）</span></span><br><span class="line">    _autoScrollTimer = Timer.periodic(<span class="built_in">Duration</span>(milliseconds: <span class="number">16</span>), (timer) &#123;</span><br><span class="line">      <span class="comment">// 获取当前上下文中的 RenderBox 对象，用于计算视图的尺寸和位置</span></span><br><span class="line">      <span class="keyword">final</span> RenderBox renderBox = context.findRenderObject() <span class="keyword">as</span> RenderBox;</span><br><span class="line">      <span class="keyword">final</span> Offset localOffset =</span><br><span class="line">          renderBox.globalToLocal(details.globalPosition);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">double</span> dy = localOffset.dy; <span class="comment">// 相对于时间轴可视化区域的位置偏移</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (dy &lt; _scrollThreshold) &#123;</span><br><span class="line">        <span class="comment">// 摸点接近上边界（dy &lt; _scrollThreshold），触发向上滚动。</span></span><br><span class="line">        <span class="keyword">if</span> (_controller.offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 偏移量向上滚动的距离是固定的 _scrollSpeed，</span></span><br><span class="line">          <span class="comment">// .clamp 确保滚动位置不会超出有效范围</span></span><br><span class="line">          _controller.jumpTo((_controller.offset - _scrollSpeed)</span><br><span class="line">              .clamp(<span class="number">0.0</span>, _controller.position.maxScrollExtent));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _stopAutoScroll();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dy &gt; renderBox.size.height - _scrollThreshold) &#123;</span><br><span class="line">        <span class="comment">// 如果触摸点接近下边界（dy &gt; renderBox.size.height - _scrollThreshold），触发向下滚动。</span></span><br><span class="line">        <span class="keyword">if</span> (_controller.offset &lt; _controller.position.maxScrollExtent) &#123;</span><br><span class="line">           <span class="comment">// 偏移量向下滚动的距离是固定的 _scrollSpeed，</span></span><br><span class="line">          <span class="comment">// .clamp 确保滚动位置不会超出有效范围</span></span><br><span class="line">          _controller.jumpTo((_controller.offset + _scrollSpeed)</span><br><span class="line">              .clamp(<span class="number">0.0</span>, _controller.position.maxScrollExtent));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          _stopAutoScroll();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _stopAutoScroll() &#123;</span><br><span class="line">    _autoScrollTimer?.cancel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在滚动时调用 _syncSelectBoxPosition 实现选中区域的同步更新</span></span><br><span class="line">  <span class="keyword">void</span> _syncSelectBoxPosition() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算滚动的增量 offsetDelta</span></span><br><span class="line">    <span class="built_in">double</span> offsetDelta = _controller.offset - _previousScrollOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_isDraging) &#123;</span><br><span class="line">      <span class="comment">// 正在拖动整个选中区域</span></span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _dragSelectWidget(offsetDelta);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_isAppointmentResizeBottom) &#123;</span><br><span class="line">      <span class="comment">// 调整选中区域底部</span></span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _appointmentResizeToDown(offsetDelta);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_isAppointmentResizeTop) &#123;</span><br><span class="line">      <span class="comment">// 调整选中区域顶部</span></span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _appointmentResizeToUp(offsetDelta);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    _previousScrollOffset = _controller.offset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在时间轴滚动时，需要同步选中区域的位置，保持选中时间段和滚动位置一致。例如，在滚动时更新选中区域的显示位置</span></span><br><span class="line">  <span class="keyword">void</span> _dragSelectWidget(<span class="built_in">double</span> offsetDelta) &#123;</span><br><span class="line"></span><br><span class="line">    _selectBoxPosition += offsetDelta;</span><br><span class="line">    <span class="comment">// 限制选中区域位置在允许范围内</span></span><br><span class="line">    <span class="built_in">double</span> minOffsetY = _marginTop;</span><br><span class="line">    <span class="built_in">double</span> maxOffsetY = (dayRegion.getInterval() + <span class="number">1</span>) * _cellHeight -</span><br><span class="line">        _selectBoxHeight -</span><br><span class="line">        _marginTop;</span><br><span class="line">    <span class="comment">// 选中区域的起始位置 Y 坐标</span></span><br><span class="line">    _selectBoxPosition = _selectBoxPosition.clamp(minOffsetY, maxOffsetY);</span><br><span class="line"></span><br><span class="line">    _updateSelectWidgetStatus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _appointmentResizeToUp(<span class="built_in">double</span> offsetDelta) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选中区域的Y坐标 和 高度变化</span></span><br><span class="line">    _selectBoxPosition += offsetDelta;</span><br><span class="line">    _selectBoxHeight -= offsetDelta;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> allStartIndex = TimeRegion.getIndexWithDateTime(selectRegion.allowStartTime, selectRegion.date);</span><br><span class="line">    <span class="built_in">int</span> startIndex = selectRegion.getStartIndex();</span><br><span class="line">    <span class="built_in">int</span> endIndex = selectRegion.getEndIndex();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_selectBoxPosition &lt;= _marginTop) &#123;</span><br><span class="line">      _selectBoxHeight = selectRegion.height;</span><br><span class="line">      _selectBoxPosition = _marginTop;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_selectBoxHeight &lt;= _cellHeight) &#123;</span><br><span class="line">      <span class="comment">// 不能小于最小单位格高度</span></span><br><span class="line">      _selectBoxHeight = _cellHeight;</span><br><span class="line">      _selectBoxPosition = (startIndex - allStartIndex) * _cellHeight + _marginTop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> maxOffsetY = (endIndex - allStartIndex) * _cellHeight - _selectBoxHeight + _marginTop;</span><br><span class="line">    <span class="built_in">double</span> maxHeight = (endIndex - allStartIndex) * _cellHeight;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查边界限制</span></span><br><span class="line">    _selectBoxHeight =</span><br><span class="line">        _selectBoxHeight.clamp(_cellHeight, maxHeight);</span><br><span class="line"></span><br><span class="line">    _selectBoxPosition = _selectBoxPosition.clamp(_marginTop, maxOffsetY);</span><br><span class="line"></span><br><span class="line">    _updateSelectWidgetStatus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _appointmentResizeToDown(<span class="built_in">double</span> offsetDelta) &#123;</span><br><span class="line">    <span class="comment">// 选中区域的高度变化</span></span><br><span class="line">    _selectBoxHeight += offsetDelta;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">double</span> minHeight = _cellHeight;</span><br><span class="line">    <span class="built_in">double</span> maxHeight =</span><br><span class="line">        (dayRegion.getEndIndex() - selectRegion.getStartIndex()) * _cellHeight;</span><br><span class="line">    <span class="comment">// 检查边界限制</span></span><br><span class="line">    _selectBoxHeight = _selectBoxHeight.clamp(minHeight, maxHeight);</span><br><span class="line"></span><br><span class="line">    _updateSelectWidgetStatus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拖动结束后，更新选中区域实际的位置</span></span><br><span class="line">  <span class="keyword">void</span> _updateSelectBoxPositionAndSizeEnd() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="built_in">double</span> point = (_selectBoxPosition - _marginTop) / _cellHeight;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">int</span> startIndex = point.round();</span><br><span class="line">      <span class="built_in">int</span> endIndex = startIndex + (_selectBoxHeight / _cellHeight).round();</span><br><span class="line">      _selectBoxHeight = (endIndex - startIndex) * _cellHeight;</span><br><span class="line">      _selectBoxPosition = (startIndex * _cellHeight) + _marginTop;</span><br><span class="line"></span><br><span class="line">      _updateSelectWidgetStatus();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新选中区域的属性，Y坐标，高度 是否和禁用区域重叠</span></span><br><span class="line">  <span class="keyword">void</span> _updateSelectWidgetStatus() &#123;</span><br><span class="line">    selectRegion.setPosition(_selectBoxPosition);</span><br><span class="line">    selectRegion.height = _selectBoxHeight;</span><br><span class="line"></span><br><span class="line">    _checkSelcteIsOverlap();</span><br><span class="line"></span><br><span class="line">    onBookingSelectback();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每次选中区域更新后，调用 _checkSelcteIsOverlap 检测是否与禁用区域冲突</span></span><br><span class="line">  <span class="keyword">void</span> _checkSelcteIsOverlap() &#123;</span><br><span class="line">    selectRegion.region = TimeRegionEnum.select;</span><br><span class="line">    disableRegions.forEach((element) &#123;</span><br><span class="line">      <span class="keyword">if</span> (selectRegion.crosses(element) || selectRegion.overlaps(element)) &#123;</span><br><span class="line">        selectRegion.region = TimeRegionEnum.overlap;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建选中区域</span></span><br><span class="line">  Widget _buildSelectTimeRegion() &#123;</span><br><span class="line">    <span class="keyword">return</span> GestureDetector(</span><br><span class="line">      onVerticalDragEnd: (details) &#123;</span><br><span class="line">        _isDraging = <span class="keyword">false</span>;</span><br><span class="line">        _stopAutoScroll();</span><br><span class="line">        _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">      &#125;,</span><br><span class="line">      onVerticalDragCancel: () &#123;</span><br><span class="line">        _isDraging = <span class="keyword">false</span>;</span><br><span class="line">        _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">      &#125;,</span><br><span class="line">      onVerticalDragUpdate: (details) &#123;</span><br><span class="line">        _isDraging = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        setState(() &#123;</span><br><span class="line">          _dragSelectWidget(details.delta.dy);</span><br><span class="line">          _startAutoScroll(details);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: TimeRegionWidget(</span><br><span class="line">        position: _selectBoxPosition,</span><br><span class="line">        height: _selectBoxHeight,</span><br><span class="line">        timeRegion: selectRegion,</span><br><span class="line">        isAppointmentResize: <span class="keyword">true</span>,</span><br><span class="line">        onDragTopUpdate: (details) &#123;</span><br><span class="line">          _isAppointmentResizeTop = <span class="keyword">true</span>;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _appointmentResizeToUp(details.delta.dy);</span><br><span class="line">            _startAutoScroll(details);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onDragTopEnd: (details) &#123;</span><br><span class="line">          _isAppointmentResizeTop = <span class="keyword">false</span>;</span><br><span class="line">          _stopAutoScroll();</span><br><span class="line">          _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">        onDragTopCancel: () &#123;</span><br><span class="line">          _isAppointmentResizeTop = <span class="keyword">false</span>;</span><br><span class="line">          _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">        onDragBottomUpdate: (details) &#123;</span><br><span class="line">          _isAppointmentResizeBottom = <span class="keyword">true</span>;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            _appointmentResizeToDown(details.delta.dy);</span><br><span class="line">            _startAutoScroll(details);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        onDragBottomEnd: (details) &#123;</span><br><span class="line">          _isAppointmentResizeBottom = <span class="keyword">false</span>;</span><br><span class="line">          _stopAutoScroll();</span><br><span class="line">          _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">        onDragBottomCancel: () &#123;</span><br><span class="line">          _isAppointmentResizeBottom = <span class="keyword">false</span>;</span><br><span class="line">          _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> LayoutBuilder(builder: (context, constraints) &#123;</span><br><span class="line">      <span class="keyword">return</span> Stack(</span><br><span class="line">        children: [</span><br><span class="line">          TimeLineWidget(</span><br><span class="line">            controller: _controller,</span><br><span class="line">            selectWidget: _buildSelectTimeRegion(),</span><br><span class="line">            disableRegions: disableRegions,</span><br><span class="line">            dayRegion: dayRegion,</span><br><span class="line">            onTapCallback: (index) &#123;</span><br><span class="line">              <span class="keyword">if</span> (selectRegion.getInterval() + index &lt;=</span><br><span class="line">                  dayRegion.getInterval() + <span class="number">1</span>) &#123;</span><br><span class="line">                _selectBoxPosition =</span><br><span class="line">                    (index - <span class="number">1</span>) * dayRegion.cellHeight + _marginTop;</span><br><span class="line">                _updateSelectBoxPositionAndSizeEnd();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, </span><br><span class="line">            selectRegion: selectRegion,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TimeRegionWidget"><a href="#TimeRegionWidget" class="headerlink" title="TimeRegionWidget"></a>TimeRegionWidget</h3><p><strong>构造函数参数</strong></p><ul><li><code>timeRegion</code>: 表示时间段的对象，包含该时间段的具体信息，如时间、颜色、文本等。</li><li><code>isAppointmentResize</code>: 布尔值，指示是否允许调整预约的大小（即是否展示上、下调整按钮）。</li><li><code>position</code>: 可选参数，表示时间段的位置，若未传入，则使用 <code>timeRegion</code> 中的值。</li><li><code>height</code>: 可选参数，表示时间段的高度，若未传入，则使用 <code>timeRegion</code> 中的值。</li><li>拖拽回调：有多个回调函数，分别用于处理时间段上方和下方的拖拽事件：<ul><li><code>onDragTopUpdate</code>、<code>onDragTopEnd</code>、<code>onDragTopCancel</code>：处理拖拽上方边缘的事件。</li><li><code>onDragBottomUpdate</code>、<code>onDragBottomEnd</code>、<code>onDragBottomCancel</code>：处理拖拽下方边缘的事件。</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeRegionWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> TimeRegion timeRegion;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> isAppointmentResize;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double?</span> position;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double?</span> height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> GestureDragUpdateCallback? onDragTopUpdate;</span><br><span class="line">  <span class="keyword">final</span> GestureDragEndCallback? onDragTopEnd;</span><br><span class="line">  <span class="keyword">final</span> GestureDragCancelCallback? onDragTopCancel;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> GestureDragUpdateCallback? onDragBottomUpdate;</span><br><span class="line">  <span class="keyword">final</span> GestureDragEndCallback? onDragBottomEnd;</span><br><span class="line">  <span class="keyword">final</span> GestureDragCancelCallback? onDragBottomCancel;</span><br><span class="line"></span><br><span class="line">  TimeRegionWidget(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.timeRegion, <span class="comment">// 表示时间段的对象，包含该时间段的具体信息，如时间、颜色、文本</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.isAppointmentResize,  <span class="comment">//是否允许拖拽</span></span><br><span class="line">    <span class="keyword">this</span>.position, <span class="comment">// 开始的位置Y坐标，若未传入，则使用 timeRegion 中的值</span></span><br><span class="line">    <span class="keyword">this</span>.height, <span class="comment">// 区域高度，若未传入，则使用 timeRegion 中的值</span></span><br><span class="line">    <span class="comment">// 拖拽回调</span></span><br><span class="line">    <span class="keyword">this</span>.onDragTopUpdate, </span><br><span class="line">    <span class="keyword">this</span>.onDragTopEnd, </span><br><span class="line">    <span class="keyword">this</span>.onDragTopCancel, </span><br><span class="line">    <span class="keyword">this</span>.onDragBottomUpdate, </span><br><span class="line">    <span class="keyword">this</span>.onDragBottomEnd, </span><br><span class="line">    <span class="keyword">this</span>.onDragBottomCancel, </span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      margin: EdgeInsets.only(top: position ?? timeRegion.getPosition(), left: <span class="number">60</span>, right: <span class="number">20</span>),</span><br><span class="line">      height:  height ?? timeRegion.height,</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        color: timeRegion.color.withOpacity(<span class="number">0.2</span>),</span><br><span class="line">        borderRadius: <span class="keyword">const</span> BorderRadius.all(Radius.circular(<span class="number">4</span>)),</span><br><span class="line">        shape: BoxShape.rectangle,</span><br><span class="line">        border: Border.all(</span><br><span class="line">          color: timeRegion.color.withOpacity(<span class="number">0.2</span>), <span class="comment">// 边框颜色</span></span><br><span class="line">          width: <span class="number">1.0</span>, <span class="comment">// 边框宽度</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      <span class="comment">// 判断是否支持拖拽展示，展示拖拽区域 或者 展示不可用区域</span></span><br><span class="line">      child: isAppointmentResize? Stack(</span><br><span class="line">          clipBehavior: Clip.none,</span><br><span class="line">          children: [</span><br><span class="line">            Positioned(</span><br><span class="line">                top: <span class="number">-10</span>,</span><br><span class="line">                left: <span class="number">-65</span>,</span><br><span class="line">                width: <span class="number">60</span>,</span><br><span class="line">                height: <span class="number">30</span>,</span><br><span class="line">                child: Text(</span><br><span class="line">                  timeRegion.text,</span><br><span class="line">                  textAlign: TextAlign.center,</span><br><span class="line">                  style: TextStyle(color: timeRegion.color, fontSize: <span class="number">14</span>),</span><br><span class="line">                )),</span><br><span class="line">            <span class="comment">// 通过 onVerticalDragUpdate、onVerticalDragEnd、onVerticalDragCancel 处理上方拖拽的回调。</span></span><br><span class="line">            Positioned(</span><br><span class="line">                left: <span class="number">0</span>,</span><br><span class="line">                top: <span class="number">-40</span>,</span><br><span class="line">                child: GestureDetector(</span><br><span class="line">                  onVerticalDragUpdate: onDragTopUpdate,</span><br><span class="line">                  onVerticalDragEnd: onDragTopEnd,</span><br><span class="line">                  onVerticalDragCancel: onDragTopCancel,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    width: <span class="number">80</span>,</span><br><span class="line">                    height: <span class="number">80</span>,</span><br><span class="line">                    child: CustomPaint(</span><br><span class="line">                      painter:</span><br><span class="line">                          CirclePainter(timeRegion.color.withOpacity(<span class="number">0.2</span>)),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                )),</span><br><span class="line">            <span class="comment">// 下方拖拽</span></span><br><span class="line">            Positioned(</span><br><span class="line">                right: <span class="number">0</span>,</span><br><span class="line">                bottom: <span class="number">-40</span>,</span><br><span class="line">                child: GestureDetector(</span><br><span class="line">                  onVerticalDragUpdate: onDragBottomUpdate,</span><br><span class="line">                  onVerticalDragEnd: onDragBottomEnd,</span><br><span class="line">                  onVerticalDragCancel: onDragBottomCancel,</span><br><span class="line">                  child: Container(</span><br><span class="line">                    width: <span class="number">80</span>,</span><br><span class="line">                    height: <span class="number">80</span>,</span><br><span class="line">                    child: CustomPaint(</span><br><span class="line">                      painter:</span><br><span class="line">                          CirclePainter(timeRegion.color.withOpacity(<span class="number">0.2</span>)),</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ))</span><br><span class="line">          ],</span><br><span class="line">        ): Container(</span><br><span class="line">              width: <span class="built_in">double</span>.infinity,</span><br><span class="line">              height: <span class="built_in">double</span>.infinity,</span><br><span class="line">              padding: EdgeInsets.all(<span class="number">0</span>),</span><br><span class="line">              child: Center(</span><br><span class="line">                child: Text(</span><br><span class="line">                timeRegion.getHintText(context),</span><br><span class="line">                style: TextStyle(color: CommonColors.wordGray, fontSize: <span class="number">16</span>, fontWeight: FontWeight.bold),</span><br><span class="line">              ),</span><br><span class="line">              )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 全局颜色</title>
      <link href="/posts/e7f5ff98.html"/>
      <url>/posts/e7f5ff98.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844903823731851272?from=search-suggest">https://juejin.cn/post/6844903823731851272?from=search-suggest</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weditor</title>
      <link href="/posts/c99061c2.html"/>
      <url>/posts/c99061c2.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zibinchen/p/17702473.html">https://www.cnblogs.com/zibinchen/p/17702473.html</a></p><p><a href="https://uiauto.devsleep.com/">https://uiauto.devsleep.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS RTL 布局适配</title>
      <link href="/posts/d87f7e0c.html"/>
      <url>/posts/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>阿拉伯地区的语言是从右到左展示的，不止是文本的适配，页面布局也需要做适配。<br>iOS9之后的RTL适配，<a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/SupportingRight-To-LeftLanguages/SupportingRight-To-LeftLanguages.html">官方文档做适配</a></p><h1 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h1><h2 id="UIVIew"><a href="#UIVIew" class="headerlink" title="UIVIew"></a>UIVIew</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UISemanticContentAttribute</span>) &#123;</span><br><span class="line">    <span class="built_in">UISemanticContentAttributeUnspecified</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UISemanticContentAttributePlayback</span>, <span class="comment">// for playback controls such as Play/RW/FF buttons and playhead scrubbers</span></span><br><span class="line">    <span class="built_in">UISemanticContentAttributeSpatial</span>, <span class="comment">// for controls that result in some sort of directional change in the UI, e.g. a segmented control for text alignment or a D-pad in a game</span></span><br><span class="line">    <span class="built_in">UISemanticContentAttributeForceLeftToRight</span>,</span><br><span class="line">    <span class="built_in">UISemanticContentAttributeForceRightToLeft</span></span><br><span class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UISemanticContentAttribute</span> semanticContentAttribute <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br></pre></td></tr></table></figure><p>设置 UIView 的属性 <code>semanticContentAttribute</code> 解决，UIView是所有控件的基类，不可能给项目所有的控件都进行修改，想要使用<code>hook</code>方法在初始化方法中解决，但是会有坑，比如 <code>WKWebView</code><br>在 <code>AppDelegate</code> 中使用 <code>[UIView appearance]</code> 解决<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (kIsRTL()) &#123;</span><br><span class="line">[<span class="built_in">UIView</span> appearance].semanticContentAttribute = <span class="built_in">UISemanticContentAttributeForceRightToLeft</span>;</span><br><span class="line">[<span class="built_in">UISearchBar</span> appearance].semanticContentAttribute = <span class="built_in">UISemanticContentAttributeForceRightToLeft</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="Masonry"><a href="#Masonry" class="headerlink" title="Masonry"></a>Masonry</h3><p>left、right 替换成 leading、trailing</p><p>全局搜索 <code>.left.</code>、 <code>.right.</code>、 <code>mas_left</code>、<code>mas_right</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202404171352692.png" alt="image.png|500"></p><p><em>注意：要Masonry库中的内容不能被替换</em></p><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>使用 frame 的布局需要我们自行处理适配，使用 category处理：<br>RTL的布局 对于 <code>y</code>、<code>size</code> 是不会影响，唯一要处理的是 <code>frame.origin.x</code><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)setRTLFrame:(<span class="built_in">CGRect</span>)frame width:(<span class="built_in">CGFloat</span>)width &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (kIsRTL()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.superview == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="built_in">NSAssert</span>(<span class="number">0</span>, <span class="string">@&quot;must invoke after have superView&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">CGFloat</span> x = width - frame.origin.x - frame.size.width;</span><br><span class="line">        frame.origin.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.frame = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRTLFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setRTLFrame:frame width:<span class="keyword">self</span>.superview.frame.size.width];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)resetFrameToFitRTL &#123;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> setRTLFrame:<span class="keyword">self</span>.frame];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>对于旧代码中的视图 Frame 且 父视图的frame已知，可以直接使用 <code>resetFrameToFitRTL</code> 方法</li><li>对于新代码可以考虑直接使用 Masonry 布局</li><li>特殊情况就要特殊处理，比如Masonry布局影响性能，使用Frame布局</li></ul><h2 id="contentHorizontalAlignment"><a href="#contentHorizontalAlignment" class="headerlink" title="contentHorizontalAlignment"></a>contentHorizontalAlignment</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIControlContentHorizontalAlignment</span>) &#123;</span><br><span class="line">    <span class="built_in">UIControlContentHorizontalAlignmentCenter</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>   = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">UIControlContentHorizontalAlignmentRight</span>  = <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">UIControlContentHorizontalAlignmentFill</span>   = <span class="number">3</span>,</span><br><span class="line">    <span class="built_in">UIControlContentHorizontalAlignmentLeading</span>  API_AVAILABLE(ios(<span class="number">11.0</span>), tvos(<span class="number">11.0</span>)) = <span class="number">4</span>,</span><br><span class="line">    <span class="built_in">UIControlContentHorizontalAlignmentTrailing</span> API_AVAILABLE(ios(<span class="number">11.0</span>), tvos(<span class="number">11.0</span>)) = <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>UIControlContentHorizontalAlignmentLeft</code>、<code>UIControlContentHorizontalAlignmentRight</code> 换成 <code>UIControlContentHorizontalAlignmentLeading</code> 、<code>UIControlContentHorizontalAlignmentTrailing</code></p><h2 id="TextAlignment"><a href="#TextAlignment" class="headerlink" title="TextAlignment"></a>TextAlignment</h2><p>官方中 textAlignment  ios9 系统之后，默认是使用 <code>NSTextAlignmentNatural</code>，这个属性也是会自动适配RTL</p><h2 id="UITextField"><a href="#UITextField" class="headerlink" title="UITextField"></a>UITextField</h2><p>UITextFileld 中的书写方向会根据键盘的语言，当前编辑的内容自动适配</p><h2 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel"></a>UILabel</h2><p>虽然系统默认使用 <code>NSTextAlignmentNatural</code> 适配方向，还是需要手动设置的方向适配<br>使用 交换方法 处理<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">char</span> kAssociatedObjectKeyLabelTextAlignment;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSTextAlignment</span>)rtl_textAlignment &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, &amp;kAssociatedObjectKeyLabelTextAlignment) integerValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRtl_textAlignment:(<span class="built_in">NSTextAlignment</span>)rtl_textAlignment &#123;</span><br><span class="line">    </span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;kAssociatedObjectKeyLabelTextAlignment, @(rtl_textAlignment), OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (kIsRTL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rtl_textAlignment == <span class="built_in">NSTextAlignmentNatural</span> || rtl_textAlignment == <span class="built_in">NSTextAlignmentLeft</span>) &#123;</span><br><span class="line">            rtl_textAlignment = <span class="built_in">NSTextAlignmentRight</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rtl_textAlignment == <span class="built_in">NSTextAlignmentRight</span>) &#123;</span><br><span class="line">            rtl_textAlignment = <span class="built_in">NSTextAlignmentLeft</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.textAlignment = rtl_textAlignment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="文本拼接混排的情况"><a href="#文本拼接混排的情况" class="headerlink" title="文本拼接混排的情况"></a>文本拼接混排的情况</h2><p>阅读习惯的不同要区分文本拼接是左到右，还是右到左</p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202404181112334.png" alt="image.png|500"><br>根据首个字符是什么语言，文本的方向就会自动改变</p><p>比如：”天气是 المطر” </p><ul><li>“天气是المطر”，”天气” 提到前面就是 LTR 的顺序，APP显示为：”天气是 المطر”</li><li>“المطر天气是”，” المطر” 放到前面就是 RTL 的顺序，APP显示为：”天气是 المطر”</li></ul><p>为了适配这种情况，可以在字符串前面加一些不会显示的字符，强制将字符串变为LTR或者RTL。</p><p>在字符串前面添加<code>\u202B</code>表示RTL，加<code>\u202A</code> 表示LTR</p><p>iOS 将@也当成了阿拉伯语 的一部分，我们需要对@手动添加 LEFT-TO-RIGHT 标志 <code>\u200E</code>，声明为LTR展示 <code>@&quot;\u200E@&quot;</code></p><p>hook UILabel 中设置文本方向处理<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BOOL</span> isRTLString(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([string hasPrefix:<span class="string">@&quot;\u202B&quot;</span>] || [string hasPrefix:<span class="string">@&quot;\u202A&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *RTLString(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">if</span> (string.length == <span class="number">0</span> || isRTLString(string)) &#123;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (kIsRTL()) &#123;</span><br><span class="line">        string = [<span class="string">@&quot;\u202B&quot;</span> stringByAppendingString:string];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        string = [<span class="string">@&quot;\u202A&quot;</span> stringByAppendingString:string];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UILabel</span> (<span class="title">RTL</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)rtl_setText:(<span class="built_in">NSString</span> *)text &#123;</span><br><span class="line">    [<span class="keyword">self</span> rtl_setText:RTLString(text)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><h2 id="NSMutableParagraphStyle"><a href="#NSMutableParagraphStyle" class="headerlink" title="NSMutableParagraphStyle"></a>NSMutableParagraphStyle</h2><p>方法1：对于富文本直接设置 UILabel 的 textAlignment 无效，要使用 NSMutableParagraphStyle 设置 textAlignment，可以 hook NSMutableParagraphStyle 设置正确的 textAlignment</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableParagraphStyle</span> (<span class="title">RTL</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">char</span> kAssociatedObjectKeyParagraphStyleAlignment;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSTextAlignment</span>)rtl_alignment &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, &amp;kAssociatedObjectKeyParagraphStyleAlignment) integerValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)setRtl_alignment:(<span class="built_in">NSTextAlignment</span>)rtl_alignment &#123;</span><br><span class="line">    </span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;kAssociatedObjectKeyParagraphStyleAlignment, @(rtl_alignment), OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (kIsRTL) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rtl_alignment == <span class="built_in">NSTextAlignmentLeft</span> || rtl_alignment == <span class="built_in">NSTextAlignmentNatural</span>) &#123;</span><br><span class="line">            rtl_alignment = <span class="built_in">NSTextAlignmentRight</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rtl_alignment == <span class="built_in">NSTextAlignmentRight</span>) &#123;</span><br><span class="line">            rtl_alignment = <span class="built_in">NSTextAlignmentLeft</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.alignment = rtl_alignment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h2><p>系统提供了图片镜像处理的方法<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)imageFlippedForRightToLeftLayoutDirection <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br></pre></td></tr></table></figure><br>比如导航栏的返回键显示<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *)rtl_imageFlippedForRightToLeftLayoutDirection &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (kIsRTL) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">UIImage</span> imageWithCGImage:<span class="keyword">self</span>.CGImage</span><br><span class="line">                                   scale:<span class="keyword">self</span>.scale</span><br><span class="line">                             orientation:<span class="built_in">UIImageOrientationUpMirrored</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义一个宏方法，如果遇到需要反转的图片就使用这个方法<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> XGetImageWithRTL(imageName) [[UIImage imageNamed:[NSString stringWithFormat:@<span class="string">&quot;%@&quot;</span>,imageName]] rtl_imageFlippedForRightToLeftLayoutDirection]</span></span><br></pre></td></tr></table></figure></p><p>也可以直接在 image Assets.xcassets 资源包中设置<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202404181559753.png" alt="image.png|500"></p><h2 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h2><p><code>UIEdgeInsets</code> 也会影响到布局，系统没有处理这个内容，手动处理<br>hook了UIButton的setContentEdgeInsets，setImageEdgeInsets，setTitleEdgeInsets方法在RTL情况下，手动调换left &lt;-&gt; right</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIEdgeInsets</span> RTLEdgeInsetsWithInsets(<span class="built_in">UIEdgeInsets</span> insets) &#123;</span><br><span class="line">    <span class="keyword">if</span> (insets.left != insets.right &amp;&amp; kIsRTL) &#123;</span><br><span class="line">        <span class="built_in">CGFloat</span> temp = insets.left;</span><br><span class="line">        insets.left = insets.right;</span><br><span class="line">        insets.right = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> insets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIButton</span> (<span class="title">RTL</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)load &#123;</span><br><span class="line">    RTLMethodSwizzling(<span class="keyword">self</span>, <span class="keyword">@selector</span>(setContentEdgeInsets:), <span class="keyword">@selector</span>(rtl_setContentEdgeInsets:));</span><br><span class="line">    RTLMethodSwizzling(<span class="keyword">self</span>, <span class="keyword">@selector</span>(setImageEdgeInsets:), <span class="keyword">@selector</span>(rtl_setImageEdgeInsets:));</span><br><span class="line">    RTLMethodSwizzling(<span class="keyword">self</span>, <span class="keyword">@selector</span>(setTitleEdgeInsets:), <span class="keyword">@selector</span>(rtl_setTitleEdgeInsets:));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)rtl_setContentEdgeInsets:(<span class="built_in">UIEdgeInsets</span>)contentEdgeInsets &#123;</span><br><span class="line">    [<span class="keyword">self</span> rtl_setContentEdgeInsets:RTLEdgeInsetsWithInsets(contentEdgeInsets)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)rtl_setImageEdgeInsets:(<span class="built_in">UIEdgeInsets</span>)imageEdgeInsets &#123;</span><br><span class="line">    [<span class="keyword">self</span> rtl_setImageEdgeInsets:RTLEdgeInsetsWithInsets(imageEdgeInsets)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)rtl_setTitleEdgeInsets:(<span class="built_in">UIEdgeInsets</span>)titleEdgeInsets &#123;</span><br><span class="line">    [<span class="keyword">self</span> rtl_setTitleEdgeInsets:RTLEdgeInsetsWithInsets(titleEdgeInsets)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="UIScrollView"><a href="#UIScrollView" class="headerlink" title="UIScrollView"></a>UIScrollView</h2><p>分页控制器处理<br>将ScrollView旋转180度，上面的子视图再旋转180度<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.scrollView.transform = <span class="built_in">CGAffineTransformMakeRotation</span>(M_PI);</span><br><span class="line"></span><br><span class="line">subView.transform = <span class="built_in">CGAffineTransformMakeRotation</span>(M_PI);</span><br></pre></td></tr></table></figure></p><h2 id="UICollectionView-水平方向"><a href="#UICollectionView-水平方向" class="headerlink" title="UICollectionView  水平方向"></a>UICollectionView  水平方向</h2><p>继承UICollectionViewFlowLayout 重写两个方法<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="built_in">UIUserInterfaceLayoutDirection</span>)effectiveUserInterfaceLayoutDirection &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRTL()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIUserInterfaceLayoutDirectionRightToLeft</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">UIUserInterfaceLayoutDirectionLeftToRight</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">BOOL</span>)flipsHorizontallyInOppositeLayoutDirection&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.尽量使用AutoLayout处理布局，不要用left和right，改用 leading 和 trailing。<br>2.多语言遇到拼接字符串的话，要谨慎。其他LTR语言中，如果是拼接字符串，第一个字符是RTL语言，会出现显示问题<br>3.图片翻转也要谨慎使用</p><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A constraint cannot be made between a leading/trailing attribute and a right/left attribute. Use leading/trailing <span class="keyword">for</span> both or neither.</span><br></pre></td></tr></table></figure><p>解决：<br>你在制定约束时，约束的对象和参考对象没有使用同一约束的成员属性。前者使用 leading，后者也要使用 leading</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 简介</title>
      <link href="/posts/3cbad699.html"/>
      <url>/posts/3cbad699.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><div class="table-container"><table><thead><tr><th>技术类型</th><th>UI渲染方式</th><th>性能</th><th>开发效率</th><th>动态化</th><th>框架代表</th></tr></thead><tbody><tr><td>H5 + 原生</td><td>WebView渲染</td><td>一般</td><td>高</td><td>支持</td><td>Cordova、Ionic</td></tr><tr><td>JavaScript + 原生渲染</td><td>原生控件渲染</td><td>好</td><td>中</td><td>支持</td><td>RN、Weex</td></tr><tr><td>自绘UI + 原生</td><td>调用系统API渲染</td><td>好</td><td>Flutter高, Qt低</td><td>默认不支持</td><td>Qt、Flutter</td></tr></tbody></table></div><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p><strong>注意点：如果你要在 <a href="https://support.apple.com/zh-cn/HT211814">Apple 芯片的 Mac 电脑</a> 上使用，你还需要安装 Rosetta 2 环境因为 <a href="https://github.com/flutter/website/pull/7119#issuecomment-1124537969">一些辅助工具</a> 仍然需要，你可以通过手动运行下面的命令来安装：</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo softwareupdate --install-rosetta --agree-to-license</span><br></pre></td></tr></table></figure></p><p><strong>具体安装流程可以查看官网</strong> <a href="https://flutter.cn/docs/get-started/install/macos">官网地址</a></p><h2 id="2-Flutter-SDK"><a href="#2-Flutter-SDK" class="headerlink" title="2.Flutter SDK"></a>2.Flutter SDK</h2><ul><li>通过github clone</li><li>直接下载压缩包</li></ul><h2 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h2><p><code>open ~/.base_profile</code></p><p><code>export PATH=&quot;$PATH:[PATH_OF_FLUTTER_GIT_DIRECTORY]/bin&quot;</code> 其中的 <code>[PATH_OF_FLUTTER_GIT_DIRECTORY]</code> 更改为你flutter路径</p><p><code>source $HOME/.bash_profile</code> 刷新配置</p><p><code>echo $PATH</code>  查看配置</p><p><code>which flutter</code>  检查是否配置成功</p><h2 id="4-开发工具选择"><a href="#4-开发工具选择" class="headerlink" title="4.开发工具选择"></a>4.开发工具选择</h2><ul><li>vscode - 轻量级</li><li>android studio - google 推荐</li></ul><h2 id="5-插件市场"><a href="#5-插件市场" class="headerlink" title="5.插件市场"></a>5.插件市场</h2><p><a href="https://pub-web.flutter-io.cn">pub-dev</a></p><h1 id="Dart-语言"><a href="#Dart-语言" class="headerlink" title="Dart 语言"></a>Dart 语言</h1><p><a href="https://book.flutterchina.club/chapter1/dart.html">Dart 语言简介</a><br><a href="https://dart.cn/language">Dart 语言</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 模拟器提示 Unable to boot the Simulator.</title>
      <link href="/posts/e1cae1f0.html"/>
      <url>/posts/e1cae1f0.html</url>
      
        <content type="html"><![CDATA[<p>解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf ~/Library/Developer/CoreSimulator/Caches</span><br></pre></td></tr></table></figure><br>不一定有效</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS17隐私清单和签名</title>
      <link href="/posts/208b625c.html"/>
      <url>/posts/208b625c.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://developer.apple.com/cn/news/?id=av1nevon">App Store 中新增的隐私功能</a></p><blockquote><p>我们将在今年晚些时候发布更多信息，包括：</p><ul><li>影响隐私的 SDK 列表 (对用户隐私产生重大影响的第三方 SDK)</li><li>“需要指明原因”的 API 列表，使用它们时必须给出合理的原因</li><li>开发者反馈表，用于就调用涉及的 API 提出新的原因</li><li>其他文档，详细介绍签名和隐私清单、他们的优势以及何时需要使用它们</li></ul></blockquote><p><a href="https://developer.apple.com/cn/news/?id=r1henawx">关于 App Store 提交的隐私更新 12-17</a></p><blockquote><p><strong>第三方 SDK 隐私清单和签名。</strong> 第三方软件开发工具包 (SDK) 能够为 App 提供强大的功能，同时也<br>能会影响用户隐私，而这些影响可能对开发者和用户来说并不明显。请注意，当你将第三方 SDK 与你的<br>App 搭配使用时，你需要对 App 中使用的相应 SDK 包含的所有代码负责，并且需要了解 SDK 的数据收<br>和使用实践。</p></blockquote><p><a href="https://developer.apple.com/cn/news/?id=3d8a9yyh">关于 App Store 提交的隐私更新 02-29</a></p><blockquote><p><strong>自 3 月 13 日起：</strong>如果你上传新 App 或更新 App 到 App Store Connect，且该 App 使用了需要声<br>批准原因的 API，但你未在 App 的隐私清单中提供批准原因，我们会通过电子邮件告知你。这是对<br>App Store Connect 中现有通知的补充。</p><p><strong>自 5 月 1 日起：</strong>你需要就你的 App 代码使用的所列 API 提供批准原因，才能将新 App 或更新 App<br>传到 App Store Connect。如果你没有合理的原因使用某个 API，请寻找替代的方案。如果你添加了常<br>第三方 SDK 列表中所列的新版第三方 SDK，那么这些 API、隐私清单和签名要求将应用于该 SDK。请务<br>使用包含其隐私清单的 SDK 版本，并注意在将该 SDK 添加为二进制依赖项时也需要提供签名。</p></blockquote><h1 id="隐私清单和SDK签名"><a href="#隐私清单和SDK签名" class="headerlink" title="隐私清单和SDK签名"></a>隐私清单和SDK签名</h1><p>Apple会列举必需使用的API类型和使用原因，还有常用的三方SDK。开发者要对APP和SDK使用到这些API的原因进行描述，配置到隐私清单中。对于提供二进制版本的三方SDK，需要第三方提供包含签名的SDK</p><p><a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests">配置隐私清单</a><br><a href="https://developer.apple.com/cn/support/third-party-SDK-requirements/">涉及到的三方SDK</a><br><a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api">必需的API</a></p><h2 id="隐私清单是什么"><a href="#隐私清单是什么" class="headerlink" title="隐私清单是什么"></a>隐私清单是什么</h2><blockquote><p>隐私清单是一个属性列表，记录您的应用程序或第三方SDK收集的数据类型，以及您的应用程序或第三方SDK使用的API所需的原因。对于您的应用程序或第三方SDK收集的每种类型的数据及其使用的API所需的原因类别，请在您的隐私清单文件中记录原因</p></blockquote><h2 id="配置隐私清单"><a href="#配置隐私清单" class="headerlink" title="配置隐私清单"></a>配置隐私清单</h2><p>在Xcode15中可以配置隐私清单，三方的SDK可以更新到最新版本，一些SDK会配置好了 PrivacyInfo.xcprivacy 隐私清单</p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403211417586.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403211419339.png" alt="image.png|500"><br>SDWebImage 隐私清单示例</p><div class="table-container"><table><thead><tr><th style="text-align:left">Key</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">NSPrivacyTracking</td><td>布尔值，指示您的应用程序或第三方SDK是否使用应用程序跟踪透明度框架下定义的数据进行跟踪。</td></tr><tr><td style="text-align:left">NSPrivacyTrackingDomains</td><td>一组字符串，列出您的应用程序或第三方SDK连接到的参与跟踪的互联网域。如果用户未通过应用程序跟踪透明度框架授予跟踪权限，则对这些域的网络请求将失败，您的应用程序将收到错误. 如果将NSPrivacyTracking设置为true，则需要在NSPrivaceTrackingDomains中至少提供一个internet域；否则，您可以提供零个或多个域。</td></tr><tr><td style="text-align:left">NSPrivacyCollectedDataTypes</td><td>一组字典，用于描述应用程序或第三方SDK收集的数据类型。有关要在字典中使用的键和值的信息</td></tr><tr><td style="text-align:left">NSPrivacyAccessedAPITypes</td><td>使用了苹果需要说明原因的api时需要填写</td></tr></tbody></table></div><h3 id="NSPrivacyTracking"><a href="#NSPrivacyTracking" class="headerlink" title="NSPrivacyTracking"></a>NSPrivacyTracking</h3><p>注意是否使用了==AppTrackingTransparency==框架。<br><a href="https://developer.apple.com/app-store/user-privacy-and-data-use/">官方文档</a></p><h3 id="NSPrivacyTrackingDomains"><a href="#NSPrivacyTrackingDomains" class="headerlink" title="NSPrivacyTrackingDomains"></a>NSPrivacyTrackingDomains</h3><p>如果用户未通过 App Tracking Transparency (ATT) 授予权限， Apple 就会阻止对追踪域（Tracking Domains）的网络请求。</p><h3 id="NSPrivacyCollectedDataTypes"><a href="#NSPrivacyCollectedDataTypes" class="headerlink" title="NSPrivacyCollectedDataTypes"></a>NSPrivacyCollectedDataTypes</h3><p>不管有没有使用 ATT 进行跟踪，都要说明收集了哪些数据类型和原因<br><a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_data_use_in_privacy_manifests">收集的数据内容</a></p><p>示例：<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403211459782.png" alt="image.png|500"></p><h3 id="NSPrivacyAccessedAPITypes"><a href="#NSPrivacyAccessedAPITypes" class="headerlink" title="NSPrivacyAccessedAPITypes"></a>NSPrivacyAccessedAPITypes</h3><p>APP需要声明使用原因的API分类 <a href="https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api">API和使用的原因</a></p><ul><li>File timestamp APIs</li><li>System boot time APIs</li><li>Disk space APIs</li><li>Active keyboard APIs</li><li>User defaults APIs</li></ul><p>示例：<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403211508706.png" alt="image.png|500"></p><h2 id="SDK-签名"><a href="#SDK-签名" class="headerlink" title="SDK 签名"></a>SDK 签名</h2><p>当你在 App 中采用第三方 SDK 的新版本时，Xcode 将验证它是否由同一开发者签名。Apple的目的就是想确保SDK不会被篡改</p><p>如果是使用cocoapod管理版本，先升级一下最新版本库，看看作者有没有对签名进行处理，如果没有就要自己签名</p><p>并不是所有的SDK都需要签名，但是Apple鼓励所有的SDK，主要看Apple提供的SDK清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 搜索指定目录下是否包含_CodeSignature签名目录</span><br><span class="line">find -name -<span class="built_in">type</span> d <span class="string">&quot;_CodeSignature&quot;</span></span><br><span class="line"></span><br><span class="line">// 列出本地与代码签名相关的证书</span><br><span class="line">security find-identity -v -p codesigning</span><br><span class="line"></span><br><span class="line">// 对SDK进行签名</span><br><span class="line">codesign --timestamp -v --sign <span class="string">&quot;Your Certificate Name&quot;</span> &lt;/path/to/SDK.framework&gt;  </span><br><span class="line"></span><br><span class="line">// 验证签名(可以看到相关签名信息)</span><br><span class="line">codesign -dvvv &lt;/path/to/SDK.framework&gt;</span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/videos/play/wwdc2023/10061">官网视频</a></p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403211556301.png" alt="image.png|500"></p><h1 id="导出隐私清单"><a href="#导出隐私清单" class="headerlink" title="导出隐私清单"></a>导出隐私清单</h1><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403211616015.png" alt="image.png|500"></p><h1 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h1><h2 id="如果作者已经不维护的SDK怎么办，比如AF"><a href="#如果作者已经不维护的SDK怎么办，比如AF" class="headerlink" title="如果作者已经不维护的SDK怎么办，比如AF"></a>如果作者已经不维护的SDK怎么办，比如AF</h2><p>理论上要自己生成清单和签名，但是重新pod后又会消失。可以考虑要不要自己维护</p><h2 id="Flutter-这次很多插件都会受影响"><a href="#Flutter-这次很多插件都会受影响" class="headerlink" title="Flutter 这次很多插件都会受影响"></a>Flutter 这次很多插件都会受影响</h2><p>官方已经在跟进，后续查看</p><h2 id="如何查看使用到必需API"><a href="#如何查看使用到必需API" class="headerlink" title="如何查看使用到必需API"></a>如何查看使用到必需API</h2><p>可以使用脚本</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.cn/post/7311876701909549065"># Flutter 上了 Apple 第三方重大列表，2024 春季 iOS 的隐私清单究竟是什么？</a><br><a href="https://juejin.cn/post/7347165355586109477"># iOS 隐私清单和三方SDK签名适配</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 证书配置</title>
      <link href="/posts/4af3f4b6.html"/>
      <url>/posts/4af3f4b6.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS App Group 数据共享</title>
      <link href="/posts/5c561c5d.html"/>
      <url>/posts/5c561c5d.html</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>前提是同一个开发者账号下</p><ul><li>App 和 App 共享数据</li><li>App 和 Extension 共享数据</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在需要的App 和 Extension 都配置上 App gruop的能力<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061855568.png" alt="image.png|500"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="主工程"><a href="#主工程" class="headerlink" title="主工程"></a>主工程</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUserDefaults</span> *userD = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@&quot;group.testGroup.a&quot;</span>];</span><br><span class="line"> </span><br><span class="line">[userD setObject:<span class="string">@&quot;共享数据&quot;</span> forKey:<span class="string">@&quot;shareKey&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="子工程"><a href="#子工程" class="headerlink" title="子工程"></a>子工程</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSUserDefaults</span> *userD = [[<span class="built_in">NSUserDefaults</span> alloc] initWithSuiteName:<span class="string">@&quot;group.testGroup.a&quot;</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *userDefault_shared = [userD objectForKey:<span class="string">@&quot;shareKey&quot;</span>];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 对接快捷指令 Sirikit</title>
      <link href="/posts/6e5f6eea.html"/>
      <url>/posts/6e5f6eea.html</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ul><li>在自己的APP中自定义快捷指令</li><li>通过 Siri 语音触发，可以跳转进入APP或者后台执行操作</li></ul><p>主要过程：</p><ul><li>创建一个Intent 意图文件，里面配置自定的意图内容</li><li>创建Intent Extension 拓展，代码处理识别到的意图回调</li><li>主工程中的录入/编辑指令操作</li></ul><h1 id="Intent-Xcode-中-配置"><a href="#Intent-Xcode-中-配置" class="headerlink" title="Intent Xcode 中 配置"></a>Intent Xcode 中 配置</h1><h2 id="创建-Intent-意图文件"><a href="#创建-Intent-意图文件" class="headerlink" title="创建 Intent 意图文件"></a>创建 Intent 意图文件</h2><p><code>Xcode - File - New — File — 搜索Intent</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403060941337.png" alt="image.png|500"></p><h2 id="增加-Intent-意图"><a href="#增加-Intent-意图" class="headerlink" title="增加 Intent 意图"></a>增加 Intent 意图</h2><p><code>选择 Intent 意图文件</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061138999.png" alt="image.png|500"></p><ul><li>New Intent 设置自定义意图</li><li>Customize System Intent 系统提供的意图</li></ul><p>在这选择 <code>New Intent</code> </p><h2 id="配置意图内容"><a href="#配置意图内容" class="headerlink" title="配置意图内容"></a>配置意图内容</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061448328.png" alt="image.png|500"><br>配置后默认有内容：<br>自定义的意图是一个可配置的动态文件，配置完成后，重新编译会自动生成代码<br>比如现在配置的意图是：ControlScene，会自动生成 SHControlSceneIntent 类 </p><p><strong>Custom Intent</strong><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061513377.png" alt="image.png|500"></p><p>这边只要选择：Suggestions 选项就行，因为我们不是要通过快捷指令APP中配置，而是要在自己的APP中配置</p><h2 id="增加参数配置"><a href="#增加参数配置" class="headerlink" title="增加参数配置"></a>增加参数配置</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061533278.png" alt="image.png|500"></p><h2 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果"></a>响应结果</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061548043.png" alt="image.png|500"></p><h2 id="创建Intent-Extension"><a href="#创建Intent-Extension" class="headerlink" title="创建Intent Extension"></a>创建Intent Extension</h2><p><code>添加 Target - 搜索 Intents 找到 Intents Extesion 就行</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061521672.png" alt="image.png|500"></p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061525697.png" alt="image.png|500"></p><p>如果不要自定义 UI ，UI Extension可以不用选择</p><p>下一步 选择 <code>Activited</code> ，创建成功</p><p><strong>注意</strong><br>要将上述创建的 意图文件关联到这个工程，编译后模板文件才会自动生成。</p><p>以上述 指令为例，编译后自动生成的文件内容<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061539722.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061544680.png" alt="image.png|500"></p><h2 id="IntentHandler-类"><a href="#IntentHandler-类" class="headerlink" title="IntentHandler 类"></a>IntentHandler 类</h2><p>这个是主要来处理指令回调的内容<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061604109.png" alt="image.png|500"></p><p>处理流程步骤为<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061610042.png" alt="image.png|500"></p><h2 id="多语言"><a href="#多语言" class="headerlink" title="多语言"></a>多语言</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061737065.png" alt="image.png|500"></p><ul><li>选择多语言类型</li><li>多语言的key是自动生成的</li></ul><h1 id="代码处理"><a href="#代码处理" class="headerlink" title="代码处理"></a>代码处理</h1><h2 id="在后台处理执行，不唤醒APP"><a href="#在后台处理执行，不唤醒APP" class="headerlink" title="在后台处理执行，不唤醒APP"></a>在后台处理执行，不唤醒APP</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)handleControlScene:(<span class="keyword">nonnull</span> SHControlSceneIntent *)intent completion:(<span class="keyword">nonnull</span> <span class="type">void</span> (^)(SHControlSceneIntentResponse * _Nonnull))completion &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     在后台进行业务处理，不唤醒APP</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 处理成功结果弹窗</span></span><br><span class="line">    completion([[SHControlSceneIntentResponse alloc] initWithCode:SHControlSceneIntentResponseCodeSuccess userActivity:<span class="literal">nil</span>]);</span><br><span class="line">    <span class="comment">// 处理失败结果弹窗</span></span><br><span class="line">    completion([[SHControlSceneIntentResponse alloc] initWithCode:SHControlSceneIntentResponseCodeFailure userActivity:<span class="literal">nil</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="唤醒APP，处理指令"><a href="#唤醒APP，处理指令" class="headerlink" title="唤醒APP，处理指令"></a>唤醒APP，处理指令</h2><h3 id="唤醒APP"><a href="#唤醒APP" class="headerlink" title="唤醒APP"></a>唤醒APP</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)handleControlScene:(<span class="keyword">nonnull</span> SHControlSceneIntent *)intent completion:(<span class="keyword">nonnull</span> <span class="type">void</span> (^)(SHControlSceneIntentResponse * _Nonnull))completion &#123;</span><br><span class="line">    </span><br><span class="line">    completion([[SHControlSceneIntentResponse alloc] initWithCode:SHControlSceneIntentResponseCodeContinueInApp userActivity:<span class="literal">nil</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在APP工程中处理指令"><a href="#在APP工程中处理指令" class="headerlink" title="在APP工程中处理指令"></a>在APP工程中处理指令</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application continueUserActivity:(<span class="built_in">NSUserActivity</span> *)userActivity restorationHandler:(<span class="type">void</span> (^)(<span class="built_in">NSArray</span>&lt;<span class="type">id</span>&lt;<span class="built_in">UIUserActivityRestoring</span>&gt;&gt; * _Nullable))restorationHandler &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>([userActivity.interaction.intent isKindOfClass:[SHControlSceneIntent <span class="keyword">class</span>]])&#123;</span><br><span class="line">        SHControlSceneIntent *intent = (SHControlSceneIntent *)userActivity.interaction.intent;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;====== %@&quot;</span>, intent.parameter);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理业务</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主工程中的代码处理"><a href="#主工程中的代码处理" class="headerlink" title="主工程中的代码处理"></a>主工程中的代码处理</h2><p>我们需要处理的内容</p><ul><li>获取所有快捷指令</li><li>新增快捷指令</li><li>编辑快捷指令</li><li>删除快捷指令</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要的库</span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Intents/Intents.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;IntentsUI/IntentsUI.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有快捷指令</span></span><br><span class="line">- (<span class="type">void</span>)getAllShortCuts &#123;</span><br><span class="line">[[INVoiceShortcutCenter sharedCenter] getAllVoiceShortcutsWithCompletion:^(<span class="built_in">NSArray</span>&lt;INVoiceShortcut *&gt; * _Nullable voiceShortcuts, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增快捷指令</span></span><br><span class="line">- (<span class="type">void</span>)addShortcutInstruction:(<span class="built_in">NSString</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">12.0</span>, *)) &#123;</span><br><span class="line">        </span><br><span class="line">        SHControlSceneIntent *intent = [[SHControlSceneIntent alloc] init];</span><br><span class="line">        intent.parameter = data; <span class="comment">// 指令携带的参数</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        INShortcut *shortcut = [[INShortcut alloc] initWithIntent:intent];</span><br><span class="line">        </span><br><span class="line">        INUIAddVoiceShortcutViewController *addVoiceShortcutViewController = [[INUIAddVoiceShortcutViewController alloc] initWithShortcut:shortcut];</span><br><span class="line">        addVoiceShortcutViewController.delegate = <span class="keyword">self</span>;</span><br><span class="line">        addVoiceShortcutViewController.modalPresentationStyle = <span class="built_in">UIModalPresentationFullScreen</span>;</span><br><span class="line">        [<span class="keyword">self</span> presentViewController:addVoiceShortcutViewController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑/删除快捷指令</span></span><br><span class="line">- (<span class="type">void</span>)editVoiceShortcut:(INVoiceShortcut *)voiceShortcut &#123;</span><br><span class="line">    </span><br><span class="line">    INUIEditVoiceShortcutViewController *editVoiceShortcutViewController = [[INUIEditVoiceShortcutViewController alloc] initWithVoiceShortcut:voiceShortcut];</span><br><span class="line">    editVoiceShortcutViewController.delegate = <span class="keyword">self</span>;</span><br><span class="line">    editVoiceShortcutViewController.modalPresentationStyle = <span class="built_in">UIModalPresentationFullScreen</span>;</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:editVoiceShortcutViewController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主工程配置"><a href="#主工程配置" class="headerlink" title="主工程配置"></a>主工程配置</h1><p><code>Capabilities 新增Siri</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403061627106.png" alt="image.png|500"></p><p><code>在info.plist 新增属性 ”Privacy - Siri Usage Description”</code></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Parameter-voice-only-prompt-dialog-can’t-be-empty"><a href="#Parameter-voice-only-prompt-dialog-can’t-be-empty" class="headerlink" title="Parameter voice-only prompt dialog can’t be empty"></a>Parameter voice-only prompt dialog can’t be empty</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Scene.parameter: Parameter voice-only prompt dialog can’t be empty. Alternately, this parameter can be marked as unresolvable.</span><br></pre></td></tr></table></figure><p>配置信息：<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403051822516.png" alt="image.png|500"></p><h2 id="不能执行回调方法"><a href="#不能执行回调方法" class="headerlink" title="不能执行回调方法"></a>不能执行回调方法</h2><p>Target 没有设置 最低版本<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202403051825352.png" alt="image.png|500"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/bb4eb2d4e0c5">SiriKit框架详细解析</a><br><a href="https://developer.apple.com/cn/documentation/widgetkit/making-a-configurable-widget/">制作可配置小组件</a><br><a href="https://www.infoq.cn/article/lsuikfdr0eyv2lusatjt">爱奇艺 iOS 深度实践：SiriKit 详解应用篇</a><br><a href="https://developer.apple.com/documentation/sirikit/adding_user_interactivity_with_siri_shortcuts_and_the_shortcuts_app">Siri shortcuts 创建</a><br><a href="https://developer-rno.apple.com/design/human-interface-guidelines/technologies/siri/custom-intents">Apple custom intent</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Siri </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android studio 新建flutter</title>
      <link href="/posts/da45522e.html"/>
      <url>/posts/da45522e.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Flutter-模块没有创建"><a href="#Flutter-模块没有创建" class="headerlink" title="Flutter 模块没有创建"></a>Flutter 模块没有创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/xxx/xxx/my_flutter/.ios/Flutter/FlutterPluginRegistrant/Classes/GeneratedPluginRegistrant.h /Users/xxx/xxx/my_flutter/.ios/Flutter/FlutterPluginRegistrant/Classes/GeneratedPluginRegistrant.h: No such file or directory</span><br></pre></td></tr></table></figure><p>解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> some/path/ // 工程目录的上一层</span><br><span class="line">flutter create --template module my_flutter</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Giscus butterfly 评论</title>
      <link href="/posts/8dfe8937.html"/>
      <url>/posts/8dfe8937.html</url>
      
        <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/603658639">Giscus 评论</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 自动分类</title>
      <link href="/posts/fb8949b7.html"/>
      <url>/posts/fb8949b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hexo写日志，通常我们都需要维护一个front-matter信息，包括title、date。博客多了，为了方便日志分类，一般还需要设置categories。<br>比如下面的例子：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title<span class="punctuation">:</span> Hexo简介</span><br><span class="line">date<span class="punctuation">:</span> <span class="number">2008</span><span class="number">-08</span><span class="number">-08</span></span><br><span class="line">categories<span class="punctuation">:</span></span><br><span class="line"> - web开发</span><br><span class="line"> - 前端</span><br><span class="line"> - 博客框架</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>久而久之，就会发现很多问题：</p><ul><li>工作繁琐：大量的category是重复性工作</li><li>容易出错：大小写和中英文目录有可能混杂。比如有个web目录，偶尔我们写成了Web，造成了目录树中冗余的节点。</li><li>可维护性差：如果要更改目录树中的节点，就要手动更改每个日志的categories变量。</li></ul><p>本文介绍一种自动生成categories的插件 </p><h1 id="自动生成-categories"><a href="#自动生成-categories" class="headerlink" title="自动生成 categories"></a>自动生成 categories</h1><p>最常用的文件管理策略，就是利用文件系统目录结构(树形结构 directory-tree)。<br>同样，为了便于管理大量的日志文件，采用目录结构是一种简便可行的方案。hexo-auto-category根据日志文件(Markdown)所在文件目录自动分类，即自动生成markdown的front-matter中的categories变量。</p><p>示例</p><p>对于博客 source/_post/web/framework/hexo.md，该插件会自动生成以下categories</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - web</span><br><span class="line"> - framework</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><p>配置<br>在站点根目录下的_config.yml添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate categories from directory-tree</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/xu-song/hexo-auto-category</span></span><br><span class="line"><span class="comment"># depth: the depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line">auto_category:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> depth:</span><br></pre></td></tr></table></figure></p><p>编译 &amp; 部署<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><br>高级配置<br>如果只想生成第一级目录分类，可以设置depth属性，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:</span><br><span class="line"> <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"> depth: 1</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://shaojin.xin/post/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F%E6%97%A5%E5%BF%97%E7%9A%84%E8%87%AA%E5%8A%A8%E5%88%86%E7%B1%BB%E6%8F%92%E4%BB%B6%20hexo-auto-category">自动分类</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Widget 布局</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-单子布局"><a href="#1-单子布局" class="headerlink" title="1.单子布局"></a>1.单子布局</h2><blockquote><p>单子布局组件的含义是其只有一个子组件，可以通过设置一些属性设置该子组件所在的位置信息等。<br>比较常用的单子布局组件有：Align、Center、Padding、Container。</p></blockquote><h3 id="1-1-Align"><a href="#1-1-Align" class="headerlink" title="1.1 Align"></a>1.1 Align</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Align(&#123;</span><br><span class="line"><span class="keyword">super</span>.key,</span><br><span class="line"><span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">// 对齐方式</span></span><br><span class="line"><span class="keyword">this</span>.widthFactor, <span class="comment">// 宽度因子，不设置的话尽可能大</span></span><br><span class="line"><span class="keyword">this</span>.heightFactor, <span class="comment">//高度因子，不设置的话尽可以大</span></span><br><span class="line"><span class="keyword">super</span>.child, <span class="comment">// 子widget</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><ul><li>因为子组件在父组件中的对齐方式必须有一个前提，就是父组件得知道自己的范围（宽度和高度）；</li><li>如果<code>widthFactor</code>和<code>heightFactor</code>不设置，那么默认Align会尽可能的大（尽可能占据自己所在的父组件）；</li><li>我们也可以对他们进行设置，比如widthFactor设置为3，那么相对于Align的宽度是子组件跨度的3倍；</li></ul><p>简单操作：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.amber,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      child: <span class="keyword">const</span> Align(</span><br><span class="line">        alignment: Alignment.bottomRight,</span><br><span class="line">        widthFactor: <span class="number">3</span>,</span><br><span class="line">        heightFactor: <span class="number">3</span>,</span><br><span class="line">        child: Icon(</span><br><span class="line">          Icons.add_a_photo,</span><br><span class="line">          size: <span class="number">36</span>,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311210718691.png" alt="image.png|500"></p><h3 id="1-2-Center"><a href="#1-2-Center" class="headerlink" title="1.2 Center"></a>1.2 Center</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Center</span> <span class="keyword">extends</span> <span class="title">Align</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Creates a widget that centers its child.</span></span></span><br><span class="line">  <span class="keyword">const</span> Center(&#123; </span><br><span class="line">    <span class="keyword">super</span>.key, </span><br><span class="line">    <span class="keyword">super</span>.widthFactor, </span><br><span class="line">    <span class="keyword">super</span>.heightFactor, </span><br><span class="line">    <span class="keyword">super</span>.child </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Center组件继承自Align</li><li>alignment设置为Alignment.center</li></ul><p>简单操作：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.amber,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      child: <span class="keyword">const</span> Center(</span><br><span class="line">        widthFactor: <span class="number">3</span>,</span><br><span class="line">        heightFactor: <span class="number">3</span>,</span><br><span class="line">        child: Icon(</span><br><span class="line">          Icons.add_a_photo,</span><br><span class="line">          size: <span class="number">36</span>,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311210729175.png" alt="image.png|500"></p><h3 id="1-3-Padding"><a href="#1-3-Padding" class="headerlink" title="1.3 Padding"></a>1.3 Padding</h3><blockquote><p>Padding 不是一个简单的属性，在这也是一个Widget，有点像是web中的内边距，但是没有margin这种widget，因为也可以使用Padding替代，</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">        color: Colors.amber,</span><br><span class="line">        child: <span class="keyword">const</span> Padding(</span><br><span class="line">            padding: EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">            child: Text(</span><br><span class="line">              <span class="string">&#x27;测试,测试,测试,测试,测试,测试,测试,测试,测试,测试,测试,测试&#x27;</span>,</span><br><span class="line">              style: TextStyle(color: Colors.red, fontSize: <span class="number">20</span>),</span><br><span class="line">            )));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311210751228.png" alt="image.png|500"></p><h3 id="1-4-Container"><a href="#1-4-Container" class="headerlink" title="1.4 Container"></a>1.4 Container</h3><ul><li>类似 iOS中的UIView</li><li>可以设置背景色、图像、边框、圆角、固定尺寸、内边距、对齐方式</li><li>使用的频率会比较高</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;</span><br><span class="line">    <span class="keyword">super</span>.key,</span><br><span class="line">    <span class="keyword">this</span>.alignment, <span class="comment">//对齐方式</span></span><br><span class="line">    <span class="keyword">this</span>.padding, <span class="comment">//容器内补白，属于decoration的装饰范围</span></span><br><span class="line">    <span class="keyword">this</span>.color, <span class="comment">//背景色</span></span><br><span class="line">    <span class="keyword">this</span>.decoration, <span class="comment">//背景装饰</span></span><br><span class="line">    <span class="keyword">this</span>.foregroundDecoration, <span class="comment">//前景装饰</span></span><br><span class="line">    <span class="built_in">double?</span> width, <span class="comment">//宽度</span></span><br><span class="line">    <span class="built_in">double?</span> height, <span class="comment">//高度</span></span><br><span class="line">    BoxConstraints? constraints, <span class="comment">//容器大小限制条件</span></span><br><span class="line">    <span class="keyword">this</span>.margin, <span class="comment">//外边距，不属于decoration的装饰范围</span></span><br><span class="line">    <span class="keyword">this</span>.transform, <span class="comment">//变形</span></span><br><span class="line">    <span class="keyword">this</span>.transformAlignment, <span class="comment">//变形对齐</span></span><br><span class="line">    <span class="keyword">this</span>.child, <span class="comment">//子widget</span></span><br><span class="line">    <span class="keyword">this</span>.clipBehavior = Clip.none,</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p><strong>其中 <code>decoration</code> 是比较重要的属性</strong></p><ul><li>它的属性是Decoration，是一个抽象类</li><li>实现类BoxDecoration来进行实例化<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BoxDecoration(&#123;</span><br><span class="line">    <span class="keyword">this</span>.color, <span class="comment">//背景颜色，和Container.color 冲突，同时使用会报错</span></span><br><span class="line">    <span class="keyword">this</span>.image, <span class="comment">//背景图片</span></span><br><span class="line">    <span class="keyword">this</span>.border, <span class="comment">// 边框</span></span><br><span class="line">    <span class="keyword">this</span>.borderRadius, <span class="comment">//圆角</span></span><br><span class="line">    <span class="keyword">this</span>.boxShadow, <span class="comment">//阴影效果</span></span><br><span class="line">    <span class="keyword">this</span>.gradient, <span class="comment">//渐变色</span></span><br><span class="line">    <span class="keyword">this</span>.backgroundBlendMode, <span class="comment">//背景混合</span></span><br><span class="line">    <span class="keyword">this</span>.shape = BoxShape.rectangle,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>简单操作<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">        child: Container(</span><br><span class="line">      width: <span class="number">150</span>,</span><br><span class="line">      height: <span class="number">150</span>,</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">          color: Colors.black,</span><br><span class="line">          border: Border.all(width: <span class="number">10</span>, color: Colors.purple),</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">20</span>),</span><br><span class="line">          boxShadow: <span class="keyword">const</span> [</span><br><span class="line">            BoxShadow(offset: Offset(<span class="number">5</span>, <span class="number">5</span>), color: Colors.black, blurRadius: <span class="number">5</span>)</span><br><span class="line">          ],</span><br><span class="line">          gradient: <span class="keyword">const</span> LinearGradient(colors: [Colors.yellow, Colors.red])),</span><br><span class="line">      <span class="comment">// color: Colors.amber,</span></span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;测试,测试,测试,测试,测试,测试,测试,测试,测试,测试,测试,测试&#x27;</span>,</span><br><span class="line">          style: TextStyle(color: Colors.black, fontSize: <span class="number">20</span>)),</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311212126738.png" alt="image.png|500"></p><h2 id="2-多子布局"><a href="#2-多子布局" class="headerlink" title="2.多子布局"></a>2.多子布局</h2><blockquote><p>在开发中，我们经常需要将多个Widget放在一起进行布局，比如水平方向、垂直方向排列，甚至有时候需要他们进行层叠，比如图片上面放一段文字等；</p><p>这个时候我们需要使用多子布局组件（Multi-child layout widgets）</p><p>比较常用的多子布局组件是Row、Column、Stack，我们来学习一下他们的使用。</p></blockquote><h3 id="2-1-Flex组件"><a href="#2-1-Flex组件" class="headerlink" title="2.1 Flex组件"></a>2.1 Flex组件</h3><p>类似iOS中的UIStackView，布局的思想应该是借鉴web flex布局，不过只能在单行、单列上排版，<br>其中主要认识两个方向，主轴和交叉轴</p><ul><li>Row：横向是主轴，纵向是交叉轴</li><li>Column：纵向是主轴，横向是交叉轴</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Flex(&#123;</span><br><span class="line">    <span class="keyword">super</span>.key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.direction,</span><br><span class="line">    <span class="keyword">this</span>.mainAxisAlignment = MainAxisAlignment.start,</span><br><span class="line">    <span class="keyword">this</span>.mainAxisSize = MainAxisSize.max,</span><br><span class="line">    <span class="keyword">this</span>.crossAxisAlignment = CrossAxisAlignment.center,</span><br><span class="line">    <span class="keyword">this</span>.textDirection,</span><br><span class="line">    <span class="keyword">this</span>.verticalDirection = VerticalDirection.down,</span><br><span class="line">    <span class="keyword">this</span>.textBaseline, <span class="comment">// NO DEFAULT: we don&#x27;t know what the text&#x27;s baseline should be</span></span><br><span class="line">    <span class="keyword">this</span>.clipBehavior = Clip.none,</span><br><span class="line">    <span class="keyword">super</span>.children,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>direction：设置主轴方向，Axis.horizontal 和 Axis.vertical</li></ul><h4 id="2-1-1-Row组件"><a href="#2-1-1-Row组件" class="headerlink" title="2.1.1 Row组件"></a>2.1.1 Row组件</h4><p><code>Row</code> 继承自 <code>Flex</code>，如果是直接确定横向布局，可以直接使用Row</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Row(&#123;</span><br><span class="line">    <span class="keyword">super</span>.key,</span><br><span class="line">    <span class="keyword">super</span>.mainAxisAlignment, <span class="comment">//主轴(横向)对齐方式</span></span><br><span class="line">    <span class="keyword">super</span>.mainAxisSize, <span class="comment">//主轴(横向)占用空间</span></span><br><span class="line">    <span class="keyword">super</span>.crossAxisAlignment, <span class="comment">//交叉轴(纵向)对齐方式</span></span><br><span class="line">    <span class="keyword">super</span>.textDirection, <span class="comment">//固定横向子widget方向，左到右、右到左</span></span><br><span class="line">    <span class="keyword">super</span>.verticalDirection, <span class="comment">//固定纵向的子widget方向，down、up</span></span><br><span class="line">    <span class="keyword">super</span>.textBaseline, </span><br><span class="line">    <span class="keyword">super</span>.children,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>mainAxisSize<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MainAxisSize &#123; </span><br><span class="line">  min, <span class="comment">// 横向宽度是子widget的总和</span></span><br><span class="line">  max, <span class="comment">// 尽可能大，横向宽度是父容器的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mainAxisAlignment</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> MainAxisAlignment &#123;</span><br><span class="line">  start,  <span class="comment">// 从头部开始排版，textDirection=.ltr从左开始，textDirection=.rtl从右开始</span></span><br><span class="line">  end, <span class="comment">// 从尾部开始排版，textDirection=.ltr从右开始，textDirection=.rtl从左开始</span></span><br><span class="line">  center, <span class="comment">//居中紧挨着</span></span><br><span class="line">  spaceBetween,</span><br><span class="line">  spaceAround,</span><br><span class="line">  spaceEvenly,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>textDirection</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> TextDirection &#123;</span><br><span class="line">  rtl, <span class="comment">// 子widget，横向方向，右到左</span></span><br><span class="line">  ltr, <span class="comment">// 子widget，横向方向，左到右</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>crossAxisAlignment</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> CrossAxisAlignment &#123;</span><br><span class="line">  start,</span><br><span class="line">  end,</span><br><span class="line">  center,</span><br><span class="line">  stretch,</span><br><span class="line">  baseline, <span class="comment">//设置为 baseline 时，必须设置 textBaseline 属性的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>简单操作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">lass MyHomeBody <span class="keyword">extends</span> StatelessWidget &#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Flex(direction: Axis.vertical, children: [</span><br><span class="line">      <span class="keyword">const</span> Align(</span><br><span class="line">        alignment: Alignment.centerLeft,</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;TextDirection.ltr&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">        mainAxisSize: MainAxisSize.max,</span><br><span class="line">        textDirection: TextDirection.ltr,</span><br><span class="line">        verticalDirection: VerticalDirection.down,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(color: Colors.red, width: <span class="number">60</span>, height: <span class="number">60</span>),</span><br><span class="line">          Container(color: Colors.blue, width: <span class="number">80</span>, height: <span class="number">80</span>),</span><br><span class="line">          Container(color: Colors.green, width: <span class="number">70</span>, height: <span class="number">70</span>),</span><br><span class="line">          Container(color: Colors.orange, width: <span class="number">100</span>, height: <span class="number">100</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">const</span> Align(</span><br><span class="line">        alignment: Alignment.centerRight,</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;TextDirection.rtl&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">        crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">        mainAxisSize: MainAxisSize.max,</span><br><span class="line">        textDirection: TextDirection.rtl,</span><br><span class="line">        verticalDirection: VerticalDirection.down,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Container(color: Colors.red, width: <span class="number">60</span>, height: <span class="number">60</span>),</span><br><span class="line">          Container(color: Colors.blue, width: <span class="number">80</span>, height: <span class="number">80</span>),</span><br><span class="line">          Container(color: Colors.green, width: <span class="number">70</span>, height: <span class="number">70</span>),</span><br><span class="line">          Container(color: Colors.orange, width: <span class="number">100</span>, height: <span class="number">100</span>),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311220833947.png" alt="image.png|400"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> widgets = [</span><br><span class="line">      Container(color: Colors.red, width: <span class="number">60</span>, height: <span class="number">40</span>),</span><br><span class="line">      Container(color: Colors.blue, width: <span class="number">80</span>, height: <span class="number">60</span>),</span><br><span class="line">      Container(color: Colors.green, width: <span class="number">70</span>, height: <span class="number">70</span>),</span><br><span class="line">      Container(color: Colors.orange, width: <span class="number">100</span>, height: <span class="number">50</span>),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Flex(</span><br><span class="line">      direction: Axis.vertical,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="keyword">const</span> Spacer(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;MainAxisAlignment.start&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            border: Border.all(width: <span class="number">3</span>, color: Colors.black),</span><br><span class="line">          ),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.start,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Spacer(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;MainAxisAlignment.end&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.end,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Spacer(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;MainAxisAlignment.center&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Spacer(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;MainAxisAlignment.spaceAround&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Spacer(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;MainAxisAlignment.spaceBetween&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Spacer(</span><br><span class="line">          flex: <span class="number">1</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;MainAxisAlignment.spaceEvenly&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311222126067.png" alt="image.png|300"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> widgets = [</span><br><span class="line">      Container(</span><br><span class="line">          color: Colors.red, width: <span class="number">60</span>, height: <span class="number">40</span>, child: <span class="keyword">const</span> Text(<span class="string">&#x27;A&#x27;</span>)),</span><br><span class="line">      Container(</span><br><span class="line">          color: Colors.blue, width: <span class="number">80</span>, height: <span class="number">60</span>, child: <span class="keyword">const</span> Text(<span class="string">&#x27;B&#x27;</span>)),</span><br><span class="line">      Container(</span><br><span class="line">          color: Colors.green, width: <span class="number">70</span>, height: <span class="number">70</span>, child: <span class="keyword">const</span> Text(<span class="string">&#x27;C&#x27;</span>)),</span><br><span class="line">      Container(</span><br><span class="line">          color: Colors.orange, width: <span class="number">100</span>, height: <span class="number">50</span>, child: <span class="keyword">const</span> Text(<span class="string">&#x27;D&#x27;</span>)),</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Flex(</span><br><span class="line">      direction: Axis.vertical,</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.spaceEvenly,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;CrossAxisAlignment.start&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            border: Border.all(width: <span class="number">3</span>, color: Colors.black),</span><br><span class="line">          ),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;CrossAxisAlignment.end&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.end,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;CrossAxisAlignment.center&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;CrossAxisAlignment.spaceAround&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          height: <span class="number">100</span>,</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Text(</span><br><span class="line">          <span class="string">&#x27;CrossAxisAlignment.spaceAround&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(width: <span class="number">3</span>, color: Colors.black)),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.baseline,</span><br><span class="line">            textBaseline: TextBaseline.ideographic,</span><br><span class="line">            children: widgets,</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311222308941.png" alt="image.png|300"></p><h4 id="2-1-2-Column"><a href="#2-1-2-Column" class="headerlink" title="2.1.2 Column"></a>2.1.2 Column</h4><p>参考Row操作</p><h3 id="2-2-Wrap"><a href="#2-2-Wrap" class="headerlink" title="2.2 Wrap"></a>2.2 Wrap</h3><p>和 Flex 不同的是，支持换行</p><h3 id="2-3-Stack"><a href="#2-3-Stack" class="headerlink" title="2.3 Stack"></a>2.3 Stack</h3><p>实现组件重叠显示，web中使用绝对定位，iOS使用frame</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Stack(&#123;</span><br><span class="line">    <span class="keyword">super</span>.key,</span><br><span class="line">    <span class="keyword">this</span>.alignment = AlignmentDirectional.topStart,</span><br><span class="line">    <span class="keyword">this</span>.textDirection,</span><br><span class="line">    <span class="keyword">this</span>.fit = StackFit.loose,</span><br><span class="line">    <span class="keyword">this</span>.clipBehavior = Clip.hardEdge,</span><br><span class="line">    <span class="keyword">super</span>.children,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>alignment：此参数决定如何去对齐没有定位（没有使用Positioned）或部分定位的子widget。所谓部分定位，在这里特指没有在某一个轴上定位：left、right为横轴，top、bottom为纵轴，只要包含某个轴上的一个定位属性就算在该轴上有定位。</li><li>textDirection：和Row、Wrap的textDirection功能一样，都用于决定alignment对齐的参考系即：textDirection的值为<code>TextDirection.ltr</code>，则alignment的<code>start</code>代表左，<code>end</code>代表右；textDirection的值为<code>TextDirection.rtl</code>，则alignment的<code>start</code>代表右，<code>end</code>代表左。</li><li>fit：此参数用于决定<strong>没有定位</strong>的子widget如何去适应Stack的大小。<code>StackFit.loose</code>表示使用子widget的大小，<code>StackFit.expand</code>表示扩伸到Stack的大小。</li><li>overflow：此属性决定如何显示超出Stack显示空间的子widget，值为<code>Overflow.clip</code>时，超出部分会被剪裁（隐藏），值为<code>Overflow.visible</code> 时则不会。</li></ul><p><strong>Stack会经常和Positioned一起来使用</strong></p><ul><li>决定组件在Stack中的位置，类似iOS中设置 UIEdgeInsert，设置上下左右的边距</li><li>设置宽、高</li><li>Positioned只能在Stack中使用<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Positioned(&#123;</span><br><span class="line">    <span class="keyword">super</span>.key,</span><br><span class="line">    <span class="keyword">this</span>.left,</span><br><span class="line">    <span class="keyword">this</span>.top,</span><br><span class="line">    <span class="keyword">this</span>.right,</span><br><span class="line">    <span class="keyword">this</span>.bottom,</span><br><span class="line">    <span class="keyword">this</span>.width,</span><br><span class="line">    <span class="keyword">this</span>.height,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">super</span>.child,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>简单操作：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        Container(width: <span class="number">300</span>, height: <span class="number">300</span>, color: Colors.lightBlue),</span><br><span class="line">        <span class="keyword">const</span> Positioned(</span><br><span class="line">          top: <span class="number">10</span>,</span><br><span class="line">          left: <span class="number">20</span>,</span><br><span class="line">          child: Text(</span><br><span class="line">            <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">            style: TextStyle(fontSize: <span class="number">30</span>),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">const</span> Positioned(</span><br><span class="line">            top: <span class="number">100</span>,</span><br><span class="line">            left: <span class="number">100</span>,</span><br><span class="line">            bottom: <span class="number">100</span>,</span><br><span class="line">            right: <span class="number">100</span>,</span><br><span class="line">            child: Text(</span><br><span class="line">              <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">50</span>),</span><br><span class="line">            )),</span><br><span class="line">        <span class="keyword">const</span> Positioned(</span><br><span class="line">            right: <span class="number">40</span>,</span><br><span class="line">            bottom: <span class="number">10</span>,</span><br><span class="line">            child: Icon(</span><br><span class="line">              Icons.face,</span><br><span class="line">              size: <span class="number">100</span>,</span><br><span class="line">            ))</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202311222250822.png" alt="image.png|500"></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Appium 运行</title>
      <link href="/posts/7dce6c5.html"/>
      <url>/posts/7dce6c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="iOS-运行"><a href="#iOS-运行" class="headerlink" title="iOS 运行"></a>iOS 运行</h1><h2 id="WebDriverAgent-工程配置"><a href="#WebDriverAgent-工程配置" class="headerlink" title="WebDriverAgent 工程配置"></a>WebDriverAgent 工程配置</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291344136.png" alt="image.png|500"></p><p>需要提前准备一个开发者账号 $99</p><h2 id="运行WebDriverAgent"><a href="#运行WebDriverAgent" class="headerlink" title="运行WebDriverAgent"></a>运行WebDriverAgent</h2><h3 id="工程运行"><a href="#工程运行" class="headerlink" title="工程运行"></a>工程运行</h3><p>选择target<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291353982.png" alt="image.png|500"><br>选择设备<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291356190.png" alt="image|500"><br>运行<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291357871.png" alt="image.png|500"></p><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><p>获取设备udid<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idevice_id -l</span><br></pre></td></tr></table></figure></p><p>cd  WebDriverAgent工程目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination <span class="string">&quot;id=设备的udid&quot;</span> USE_PORT=8100 <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><h3 id="命令行使用脚本执行"><a href="#命令行使用脚本执行" class="headerlink" title="命令行使用脚本执行"></a>命令行使用脚本执行</h3><p>命令行的执行方式可以结合成sh脚本 ，这个步骤不是必须的</p><p>新建 sh 文件<br>cd  WebDriverAgent工程目录下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi start.sh</span><br></pre></td></tr></table></figure><br>输入内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解锁keychain，以便可以正常的签名应用，PASSWORD是你自己mac电脑的开机密码</span></span><br><span class="line"><span class="comment"># 这个步骤不是必须的</span></span><br><span class="line">PASSWORD=<span class="string">&quot;xxxx&quot;</span> </span><br><span class="line">security unlock-keychain -p <span class="variable">$PASSWORD</span> ~/Library/Keychains/login.keychain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取设备的UDID</span></span><br><span class="line">UDID=$(idevice_id -l | <span class="built_in">head</span> -n1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">xcodebuild -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination <span class="string">&quot;id=<span class="variable">$UDID</span>&quot;</span> USE_PORT=8100 <span class="built_in">test</span> </span><br></pre></td></tr></table></figure><br>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh start.sh</span><br></pre></td></tr></table></figure></p><h2 id="Appium-server-运行"><a href="#Appium-server-运行" class="headerlink" title="Appium server 运行"></a>Appium server 运行</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291408009.png" alt="image.png|500"><br>直接打开 Appium Server GUI - startServer</p><h2 id="Appium-inspector-运行"><a href="#Appium-inspector-运行" class="headerlink" title="Appium inspector 运行"></a>Appium inspector 运行</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291412019.png" alt="image.png|500"></p><p>配置内容参考：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;platformName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iOS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platformVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iPhone8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;automationName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XCUITest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bundleId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;udid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>Remote Path 要填 <code>/wd/hub</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">idevice_id -l // 获取 udid</span><br><span class="line">ideviceinstaller -l // 获取bundleId</span><br></pre></td></tr></table></figure><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>配置内容参考<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;platformName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Android&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;platformVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;12&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deviceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8BMY112RJ&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appPackage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;appActivity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;automationName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UiAutomator2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>获取 deviceName<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></p><p>获取 platformVersion<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure></p><p>获取 appActivity 和 appPackage<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat|grep <span class="string">&quot;START&quot;</span></span><br></pre></td></tr></table></figure><br>先执行上述指令，再冷启动APP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02-29 15:48:44.809  2215  3584 I ActivityTaskManager: START u0 &#123;act=android.intent.action.MAIN <span class="built_in">cat</span>=[android.intent.category.LAUNCHER] flg=0x10200000 cmp=包名在这/Activity在这 bnds=[585,1300][855,1694]&#125; from uid 10153</span><br></pre></td></tr></table></figure></p><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><h2 id="Neither-ANDROID-HOME-nor-ANDROID-SDK-ROOT-environment-variable-was-exported"><a href="#Neither-ANDROID-HOME-nor-ANDROID-SDK-ROOT-environment-variable-was-exported" class="headerlink" title="Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported"></a>Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error</span><br><span class="line">An unknown server-side error occurred <span class="keyword">while</span> processing the <span class="built_in">command</span>. Original error: Neither ANDROID_HOME nor ANDROID_SDK_ROOT environment variable was exported. Read https://developer.android.com/studio/command-line/variables <span class="keyword">for</span> more details</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402291558055.png" alt="image.png|500"><br>在 Appium gui - Edit Configurations 设置环境变量 </p><h2 id="Could-not-find-a-connected-Android-device"><a href="#Could-not-find-a-connected-Android-device" class="headerlink" title="Could not find a connected Android device"></a>Could not find a connected Android device</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error</span><br><span class="line"></span><br><span class="line">Failed to create session. An unknown server-side error occurred <span class="keyword">while</span> processing the <span class="built_in">command</span>. Original error: Could not find a connected Android device <span class="keyword">in</span> 20076ms.</span><br></pre></td></tr></table></figure><p>查看手机有没有连接成功</p><h2 id="Cannot-start-the-‘XXX’-application"><a href="#Cannot-start-the-‘XXX’-application" class="headerlink" title="Cannot start the ‘XXX’ application"></a>Cannot start the ‘XXX’ application</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot start the <span class="string">&#x27;XXX&#x27;</span> application</span><br></pre></td></tr></table></figure><p>确认 appActivity 是否正确，最好设置从启动页开始</p><h2 id="Could-not-proxy-command-to-the-remote-server"><a href="#Could-not-proxy-command-to-the-remote-server" class="headerlink" title="Could not proxy command to the remote server"></a>Could not proxy command to the remote server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error</span><br><span class="line"></span><br><span class="line">Failed to create session. An unknown server-side error occurred <span class="keyword">while</span> processing the <span class="built_in">command</span>. Original error: Could not proxy <span class="built_in">command</span> to the remote server. Original error: socket hang up</span><br></pre></td></tr></table></figure><p>可能是执行appium 上个进程没有关闭导致的</p><ul><li>删除手机里的 Appium setting，给appium 换个服务端口</li><li>重启大法 搞定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appium </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appium + WebDriverAgent iOS 自动化测试</title>
      <link href="/posts/a2c6b5bc.html"/>
      <url>/posts/a2c6b5bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>mac 搭建 Appium 自动化测试环境</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><div class="table-container"><table><thead><tr><th>环境</th><th>作用</th><th>版本</th></tr></thead><tbody><tr><td>Mac</td><td>系统</td><td>macOS Sonoma</td></tr><tr><td>Homebrew</td><td>Mac 包管理器</td><td>4.2.10</td></tr><tr><td>npm</td><td>node.js 包管理器</td><td>8.3.1</td></tr><tr><td>nodejs</td><td>js 运行环境</td><td>v16.14.0</td></tr><tr><td>Carthage</td><td>iOS 包管理</td><td>0.39.1</td></tr><tr><td>ideviceinstaller</td><td>列出安装app的信息</td><td></td></tr><tr><td>libimobiledevice</td><td>appium连接iOS设备依赖库，可以获取iOS库的信息</td><td></td></tr><tr><td>Xcode</td><td>开发工具</td><td>15.2</td></tr><tr><td>WebDriverAgent</td><td>集成Appium测试ios应用的桥梁</td><td>7.01</td></tr><tr><td>Appium - Desktop</td><td>客户端</td><td>1.22.3</td></tr><tr><td>Appium - inspector</td><td>检查app元素的工具</td><td>2024.2.2</td></tr><tr><td>Appium - doctor</td><td>检测Appium整体依赖环境配置情况</td><td>1.16.2</td></tr><tr><td>Android sdk</td><td>Google提供的Android开发工具包</td><td></td></tr><tr><td>JAVA_JDK</td><td></td></tr></tbody></table></div><h2 id="Homerbrew"><a href="#Homerbrew" class="headerlink" title="Homerbrew"></a>Homerbrew</h2><p>国内源：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><br>验证是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure></p><h2 id="node-js-npm"><a href="#node-js-npm" class="headerlink" title="node.js / npm"></a>node.js / npm</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>验证是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v </span><br><span class="line">npm -v </span><br></pre></td></tr></table></figure></p><h2 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install carthage</span><br></pre></td></tr></table></figure><h2 id="libimobiledevice"><a href="#libimobiledevice" class="headerlink" title="libimobiledevice"></a>libimobiledevice</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install --HEAD libimobiledevice</span><br></pre></td></tr></table></figure><p>验证是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idevice_id -l</span><br></pre></td></tr></table></figure></p><h2 id="ideviceinstaller"><a href="#ideviceinstaller" class="headerlink" title="ideviceinstaller"></a>ideviceinstaller</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ideviceinstaller</span><br></pre></td></tr></table></figure><p>验证是否成功：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ideviceinstaller -l</span><br></pre></td></tr></table></figure></p><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>App store 商店下载</p><h2 id="WebDriverAgent"><a href="#WebDriverAgent" class="headerlink" title="WebDriverAgent"></a>WebDriverAgent</h2><p>facebook开源的框架，Appium是接手开发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/appium/WebDriverAgent</span><br></pre></td></tr></table></figure></p><h2 id="Appium"><a href="#Appium" class="headerlink" title="Appium"></a>Appium</h2><p>bash：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g appium</span><br></pre></td></tr></table></figure></p><p>客户端：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/appium/appium-desktop/releases</span><br><span class="line">title: &quot;Releases · appium/appium-desktop&quot;</span><br><span class="line">description: &quot;Appium Server in Desktop GUIs for Mac, Windows, and Linux - appium/appium-desktop&quot;</span><br><span class="line">host: github.com</span><br><span class="line">favicon: https://github.githubassets.com/favicons/favicon.svg</span><br><span class="line">image: https://opengraph.githubassets.com/ddb35796edcc1ed6df94eda28a0851a236dfd6cf172660dfce2ce7b9a01c81d4/appium/appium-desktop</span><br></pre></td></tr></table></figure></p><h2 id="Appium-inspector"><a href="#Appium-inspector" class="headerlink" title="Appium - inspector"></a>Appium - inspector</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/appium/appium-inspector/releases</span><br><span class="line">title: &quot;Releases · appium/appium-inspector&quot;</span><br><span class="line">description: &quot;A GUI inspector for mobile apps and more, powered by a (separately installed) Appium server - appium/appium-inspector&quot;</span><br><span class="line">host: github.com</span><br><span class="line">favicon: https://github.githubassets.com/favicons/favicon.svg</span><br><span class="line">image: https://opengraph.githubassets.com/282be159fff944aa325d077799888cabfbde4f34f3f7cf63f1b1ce55ce7fe8ea/appium/appium-inspector</span><br></pre></td></tr></table></figure><h2 id="Appium-doctor"><a href="#Appium-doctor" class="headerlink" title="Appium - doctor"></a>Appium - doctor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install appium-doctor -g </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appium-doctor</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">info AppiumDoctor <span class="comment">### Diagnostic for necessary dependencies starting ###</span></span><br><span class="line">info AppiumDoctor  ✔ The Node.js binary was found at: /usr/local/bin/node</span><br><span class="line">info AppiumDoctor  ✔ Node version is 16.14.0</span><br><span class="line">info AppiumDoctor  ✔ Xcode is installed at: /Applications/Xcode.app/Contents/Developer</span><br><span class="line">info AppiumDoctor  ✔ Xcode Command Line Tools are installed <span class="keyword">in</span>: /Applications/Xcode.app/Contents/Developer</span><br><span class="line">info AppiumDoctor  ✔ DevToolsSecurity is enabled.</span><br><span class="line">info AppiumDoctor  ✔ The Authorization DB is <span class="built_in">set</span> up properly.</span><br><span class="line">info AppiumDoctor  ✔ Carthage was found at: /usr/local/bin/carthage. Installed version is: 0.39.1</span><br><span class="line">info AppiumDoctor  ✔ HOME is <span class="built_in">set</span> to: /Users/akuvox</span><br><span class="line">info AppiumDoctor  ✔ ANDROID_HOME is <span class="built_in">set</span> to: /Users/akuvox/Library/Android/sdk</span><br><span class="line">info AppiumDoctor  ✔ JAVA_HOME is <span class="built_in">set</span> to: /Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home</span><br><span class="line">info AppiumDoctor    Checking adb, android, emulator, apkanalyzer</span><br><span class="line">info AppiumDoctor      <span class="string">&#x27;adb&#x27;</span> is <span class="keyword">in</span> /Users/akuvox/Library/Android/sdk/platform-tools/adb</span><br><span class="line">info AppiumDoctor      <span class="string">&#x27;android&#x27;</span> is <span class="keyword">in</span> /Users/akuvox/Library/Android/sdk/tools/android</span><br><span class="line">info AppiumDoctor      <span class="string">&#x27;emulator&#x27;</span> is <span class="keyword">in</span> /Users/akuvox/Library/Android/sdk/emulator/emulator</span><br><span class="line">info AppiumDoctor      <span class="string">&#x27;apkanalyzer&#x27;</span> is <span class="keyword">in</span> /Users/akuvox/Library/Android/sdk/cmdline-tools/latest/bin/apkanalyzer</span><br><span class="line">info AppiumDoctor  ✔ adb, android, emulator, apkanalyzer exist: /Users/akuvox/Library/Android/sdk</span><br><span class="line">info AppiumDoctor  ✔ <span class="string">&#x27;bin&#x27;</span> subfolder exists under <span class="string">&#x27;/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Android-sdk"><a href="#Android-sdk" class="headerlink" title="Android sdk"></a>Android sdk</h2><p>运行安卓需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url: https://developer.android.com/studio?hl=zh-cn</span><br><span class="line">title: &quot;下载 Android Studio 和应用工具 - Android 开发者  |  Android Developers&quot;</span><br><span class="line">description: &quot;Android Studio 提供了一些应用构建器以及一个已针对 Android 应用进行优化的集成式开发环境 (IDE)。立即下载 Android Studio。&quot;</span><br><span class="line">host: developer.android.com</span><br><span class="line">image: https://developer.android.com/static/images/social/android-developers.png?hl=zh-cn</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_33896873/article/details/108266817">环境配置</a></p><h2 id="JAVA-JDK"><a href="#JAVA-JDK" class="headerlink" title="JAVA_JDK"></a>JAVA_JDK</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://www.oracle.com/java/technologies/downloads</span><br><span class="line">title: &quot;Download the Latest Java LTS Free&quot;</span><br><span class="line">description: &quot;Subscribe to Java SE and get the most comprehensive Java support available, with 24/7 global access to the experts.&quot;</span><br><span class="line">host: www.oracle.com</span><br><span class="line">favicon: https://www.oracle.com/asset/web/favicons/favicon-32.png</span><br><span class="line">image: https://www.oracle.com/a/ocom/img/social-og-java-logo-1200x628.jpg</span><br></pre></td></tr></table></figure><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><h2 id="libimobiledevice-报错"><a href="#libimobiledevice-报错" class="headerlink" title="libimobiledevice 报错"></a>libimobiledevice 报错</h2><p>现象：<code>curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 1 ms: Couldn&#39;t connect to server</code><br>原因：<br>github 的一些域名的 DNS 解析被污染，导致DNS 解析过程无法通过域名取得正确的IP地址。<br>解决：<br>配置一下hosts <code>sudo vi /etc/hosts</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">url: https://github.com/hawtim/hawtim.github.io/issues/10</span><br><span class="line">title: &quot;如何解决类似 curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused 的问题 · Issue #10 · hawtim/hawtim.github.io&quot;</span><br><span class="line">description: &quot;背景 笔者最近发现 github 的用户头像和自己文章中的图片显示不出来了。然后今天发现安装 homeBrew 和 nvm 出现了标题的报错信息。 以上是安装 pnpm 的报错信息，可以发现，脚本需要到 raw.githubusercontent.com 上拉取代码。 网上搜索了一下，发现是 github 的一些域名的 DNS 解析被污染，导致DNS 解析过程无法通过域名取得正确的IP地址。...&quot;</span><br><span class="line">host: github.com</span><br><span class="line">favicon: https://github.githubassets.com/favicons/favicon.svg</span><br><span class="line">image: https://opengraph.githubassets.com/c0f974e5a83ed99983dac5999b260a3c3b098e622e630e98d02f93b6cebf3e58/hawtim/hawtim.github.io/issues/10</span><br></pre></td></tr></table></figure></p><h2 id="Scripts-bootstrap-sh-报错"><a href="#Scripts-bootstrap-sh-报错" class="headerlink" title="./Scripts/bootstrap.sh 报错"></a>./Scripts/bootstrap.sh 报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Fetching Inspector dependencies...</span><br><span class="line">npm ERR! code ERESOLVE</span><br><span class="line">npm ERR! ERESOLVE unable to resolve dependency tree</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! While resolving: web-driver-inspector@1.0.0</span><br><span class="line">npm ERR! Found: react@15.6.1</span><br><span class="line">npm ERR! node_modules/react</span><br><span class="line">npm ERR!   react@<span class="string">&quot;15.6.1&quot;</span> from the root project</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Could not resolve dependency:</span><br><span class="line">npm ERR! peer react@<span class="string">&quot;^15.7.0&quot;</span> from react-dom@15.7.0</span><br><span class="line">npm ERR! node_modules/react-dom</span><br><span class="line">npm ERR!   react-dom@<span class="string">&quot;^15.6.1&quot;</span> from the root project</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Fix the upstream dependency conflict, or retry</span><br><span class="line">npm ERR! this <span class="built_in">command</span> with --force or --legacy-peer-deps</span><br><span class="line">npm ERR! to accept an incorrect (and potentially broken) dependency resolution.</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! For a full report see:</span><br></pre></td></tr></table></figure><p>原因：npm依赖冲突<br>解决：<br><code>WebDriverAgent - Scripts - bootstrap.sh</code> 文件中的命令<br><code>npm install</code> 改成 <code>npm install --legacy-peer-deps</code></p><h2 id="appium-doctor-报错"><a href="#appium-doctor-报错" class="headerlink" title="appium-doctor 报错"></a>appium-doctor 报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info AppiumDoctor  ✔ The Node.js binary was found at: /opt/homebrew/bin/node</span><br><span class="line">info AppiumDoctor  ✔ Node version is 21.6.1</span><br><span class="line">info AppiumDoctor  ✔ Xcode is installed at: /Applications/Xcode.app/Contents/Developer</span><br><span class="line">info AppiumDoctor  ✔ Xcode Command Line Tools are installed <span class="keyword">in</span>: /Applications/Xcode.app/Contents/Developer</span><br><span class="line">info AppiumDoctor  ✔ DevToolsSecurity is enabled.</span><br><span class="line">info AppiumDoctor  ✔ The Authorization DB is <span class="built_in">set</span> up properly.</span><br><span class="line">info AppiumDoctor  ✔ Carthage was found at: /opt/homebrew/bin/carthage. Installed version is: 0.39.1</span><br><span class="line">info AppiumDoctor  ✔ HOME is <span class="built_in">set</span> to: /Users/akuvox</span><br><span class="line">WARN AppiumDoctor  ✖ ANDROID_HOME environment variable is NOT <span class="built_in">set</span>!</span><br><span class="line">WARN AppiumDoctor  ✖ JAVA_HOME environment variable is NOT <span class="built_in">set</span>!</span><br><span class="line">WARN AppiumDoctor  ✖ adb, android, emulator, apkanalyzer could not be found because ANDROID_HOME or ANDROID_SDK_ROOT is NOT <span class="built_in">set</span>!</span><br><span class="line">WARN AppiumDoctor  ✖ Cannot check <span class="variable">$JAVA_HOME</span> requirements since the environment variable itself is not <span class="built_in">set</span></span><br></pre></td></tr></table></figure><p>原因：环境变量没有配置<br>解决：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><br>配置变量内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/xxxxxxxxxxxx/Library/Android/sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform_tools</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=$(/usr/libexec/java_home)</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><h2 id="Appium-Inspector运行报错"><a href="#Appium-Inspector运行报错" class="headerlink" title="Appium Inspector运行报错"></a>Appium Inspector运行报错</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error</span><br><span class="line"></span><br><span class="line">Could not connect to Appium server URL <span class="string">&#x27;http://127.0.0.1:4723/&#x27;</span>. Please check <span class="keyword">if</span> the server is running and the URL is correct (valid URLs can be found at the start of the Appium server <span class="built_in">log</span>). If you are using the Inspector<span class="string">&#x27;s browser version, ensure the server has been started with &#x27;</span>--allow-cors<span class="string">&#x27;.</span></span><br></pre></td></tr></table></figure><p>解决：<br>Remote Path 要填：/wd/hub<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402281752331.png" alt="image.png|500"></p>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appium </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode 不同Target多语言词条同步</title>
      <link href="/posts/9b819cf7.html"/>
      <url>/posts/9b819cf7.html</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>已经存在一个主Target，要新建一个Taregt 并且多语言词条的内容一致，但是要求部分关键内容需要更改。</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="新建多语言文件"><a href="#新建多语言文件" class="headerlink" title="新建多语言文件"></a>新建多语言文件</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271517251.png" alt="image.png|500"><br>在新建Target的文件夹中新建 <code>InfoPlist.strings</code> 和 <code>Localizable.strings</code> </p><h2 id="选择需要同步的语言"><a href="#选择需要同步的语言" class="headerlink" title="选择需要同步的语言"></a>选择需要同步的语言</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271519957.png" alt="image.png|300"></p><h2 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_and_replace_strings</span>(<span class="params">source_dir, target_dir, old_text, new_text</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取源目录下的一级文件夹</span></span><br><span class="line">        folders = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(source_dir) <span class="keyword">if</span> os.path.isdir(os.path.join(source_dir, f))]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历一级文件夹</span></span><br><span class="line">        <span class="keyword">for</span> folder <span class="keyword">in</span> folders:</span><br><span class="line">            source_folder = os.path.join(source_dir, folder)</span><br><span class="line">            target_folder = os.path.join(target_dir, folder)</span><br><span class="line">            <span class="comment"># 检查是否在目标目录中有对应的文件夹</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(target_folder):</span><br><span class="line">                <span class="comment"># 复制.strings文件到目标目录下相同文件中并替换内容</span></span><br><span class="line">                copy_and_replace_strings_from_source_to_target(source_folder, target_folder, old_text, new_text)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;拷贝并替换完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件或目录未找到，请检查路径是否正确。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy_and_replace_strings_from_source_to_target</span>(<span class="params">source_dir, target_dir, old_text, new_text</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 遍历源目录下的所有文件</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(source_dir):</span><br><span class="line">            <span class="comment"># 只处理.strings文件</span></span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.strings&#x27;</span>):</span><br><span class="line">                source_file_path = os.path.join(source_dir, file)</span><br><span class="line">                target_file_path = os.path.join(target_dir, file)</span><br><span class="line">                <span class="comment"># 逐行读取文件内容并替换值</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(source_file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> source_file:</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(target_file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> target_file:</span><br><span class="line">                        <span class="keyword">for</span> line <span class="keyword">in</span> source_file:</span><br><span class="line">                            <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                                key, value = line.strip().split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                                <span class="keyword">if</span> old_text.lower() <span class="keyword">in</span> value.lower():</span><br><span class="line">                                    <span class="comment"># 定位文本位置并替换</span></span><br><span class="line">                                    start_index = value.lower().find(old_text.lower())</span><br><span class="line">                                    end_index = start_index + <span class="built_in">len</span>(old_text)</span><br><span class="line">                                    new_value = value[:start_index] + new_text + value[end_index:]</span><br><span class="line">                                    target_file.write(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>=<span class="subst">&#123;new_value&#125;</span>\n&quot;</span>)</span><br><span class="line">                                <span class="keyword">else</span>:</span><br><span class="line">                                    target_file.write(line)</span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                target_file.write(line)</span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;文件内容已从 <span class="subst">&#123;source_file_path&#125;</span> 复制到 <span class="subst">&#123;target_file_path&#125;</span> 并替换完成&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件或目录未找到，请检查路径是否正确。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入的源路径、目标路径以及替换前后的文本</span></span><br><span class="line">source_directory = <span class="built_in">input</span>(<span class="string">&quot;请输入源路径：&quot;</span>)</span><br><span class="line">target_directory = <span class="built_in">input</span>(<span class="string">&quot;请输入目标路径：&quot;</span>)</span><br><span class="line">old_text = <span class="built_in">input</span>(<span class="string">&quot;请输入要替换的文本（原文本）：&quot;</span>)</span><br><span class="line">new_text = <span class="built_in">input</span>(<span class="string">&quot;请输入替换后的文本（新文本）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">copy_and_replace_strings(source_directory, target_directory, old_text, new_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios 多播网络（Multicast）应用权限</title>
      <link href="/posts/b76d697c.html"/>
      <url>/posts/b76d697c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>用户将手机连接到路由器后，利用路由器广播报文与设备进行通信配对。对手机、路由器、App 有兼容性或者权限要求。<br>苹果（Apple.com）为提升安全性引入 Multicast 权限，在iOS14 之后需要申请该权限</p><h1 id="申请填写"><a href="#申请填写" class="headerlink" title="申请填写"></a>申请填写</h1><p>这个过程大概要 5 个工作日，需要等待apple回复邮件</p><h2 id="1-前往苹果开发者官网申请-Multicast-权限"><a href="#1-前往苹果开发者官网申请-Multicast-权限" class="headerlink" title="1.前往苹果开发者官网申请 Multicast 权限"></a>1.前往苹果开发者官网申请 <a href="https://developer.apple.com/contact/request/networking-multicast" title="Multicast 权限">Multicast 权限</a></h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271342416.png" alt="image.png|500"></p><h2 id="2-填写信息"><a href="#2-填写信息" class="headerlink" title="2.填写信息"></a>2.填写信息</h2><div class="table-container"><table><thead><tr><th>填写项</th><th>填写示例</th><th>注意事项</th></tr></thead><tbody><tr><td>App Name</td><td></td><td>主账号申请</td></tr><tr><td>App Store URL</td><td></td><td></td></tr><tr><td>Apple ID of App</td><td></td><td></td></tr><tr><td>App Category</td><td>Lifestyle</td><td></td></tr><tr><td>Describe the main purpose of your app</td><td></td><td>应用描述</td></tr><tr><td>Explain why your app needs to <br>send multicast or broadcast traffic, <br>or browse for all Bonjour service types.</td><td>我们的 App 需要和我们的硬件设备进行通信，由于 IP 地址和端口不固定，使用自定义的广播组播协议进行通信，使用 UDP 6666、6667 端口。例如，APP监听到发出的UDP包广播数据后，解析出其中的信息，app和设备端建立长连接通信</td><td>申请这个权限的用途</td></tr></tbody></table></div><h1 id="申请成功后配置"><a href="#申请成功后配置" class="headerlink" title="申请成功后配置"></a>申请成功后配置</h1><p>申请成功后，apple 会回复一个邮件告知申请成功了</p><h2 id="开发者后台为APP增加Multicast配置"><a href="#开发者后台为APP增加Multicast配置" class="headerlink" title="开发者后台为APP增加Multicast配置"></a>开发者后台为APP增加Multicast配置</h2><h3 id="1-进入-开发者后台-gt-Certificates-IDs-amp-Profiles。"><a href="#1-进入-开发者后台-gt-Certificates-IDs-amp-Profiles。" class="headerlink" title="1.进入 开发者后台 -&gt; Certificates, IDs &amp; Profiles。"></a>1.进入 开发者后台 -&gt; Certificates, IDs &amp; Profiles。</h3><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271356637.png" alt="image.png|500"></p><h3 id="2-选择-App-对应的-Identifiers"><a href="#2-选择-App-对应的-Identifiers" class="headerlink" title="2.选择 App 对应的 Identifiers"></a>2.选择 App 对应的 Identifiers</h3><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271403420.png" alt="image.png|500"></p><h3 id="3-勾选-Multicast-Networking，然后点击-保存。"><a href="#3-勾选-Multicast-Networking，然后点击-保存。" class="headerlink" title="3.勾选 Multicast Networking，然后点击 保存。"></a>3.勾选 Multicast Networking，然后点击 <strong>保存</strong>。</h3><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271404937.png" alt="image.png|500"></p><h2 id="App项目工程的环境配置文件"><a href="#App项目工程的环境配置文件" class="headerlink" title="App项目工程的环境配置文件"></a>App项目工程的环境配置文件</h2><p>app的的xxxx.entitlements配置文件中添加com.apple.developer.networking.multicast的布尔值为yes<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402271405327.png" alt="image.png|500"></p><h2 id="info-plist-文件中-添加本地网络使用权限"><a href="#info-plist-文件中-添加本地网络使用权限" class="headerlink" title="info.plist 文件中,添加本地网络使用权限"></a>info.plist 文件中,添加本地网络使用权限</h2><p><code>Privacy - Local Network Usage Description</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://blog.csdn.net/dragoonnet/article/details/128416927?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-128416927-blog-130459362.235%5Ev38%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-128416927-blog-130459362.235%5Ev38%5Epc_relevant_anti_t3&amp;utm_relevant_index=2</span><br><span class="line">title: &quot;多播网络（Multicast）应用权限_imulticast networking-CSDN博客&quot;</span><br><span class="line">description: &quot;文章浏览阅读1.9k次。本文介绍如何在苹果开发者官网申请（Multicast）应用权限，从而正常使用 Wi-Fi 快连配网功能。本文适用于 iOS 版本的 OEM App 或者其他有相同需求的 App。_imulticast networking&quot;</span><br><span class="line">host: blog.csdn.net</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode 多渠道打包</title>
      <link href="/posts/3a230aa.html"/>
      <url>/posts/3a230aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>同一份代码，要打包成不同的APP，但是要区分图标、名称、部分功能点</p><p>方式：</p><ul><li>直接复制一份修改，弊端是如果后续需要同步维护很麻烦</li><li>建立新的target</li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="创建新的target（基于现有的targte复制出来）"><a href="#创建新的target（基于现有的targte复制出来）" class="headerlink" title="创建新的target（基于现有的targte复制出来）"></a>创建新的target（基于现有的targte复制出来）</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261523069.png" alt="image.png|500"></p><p><code>TARGETS - 选中工程target - 右键出现上述选项 - 选中 Duplicate</code></p><ul><li>在列表中出现复制项目target</li><li>工程文件夹中出现复制项 plist 文件</li></ul><h2 id="修改target和Scheme名称"><a href="#修改target和Scheme名称" class="headerlink" title="修改target和Scheme名称"></a>修改target和Scheme名称</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261524013.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261524967.png" alt="image.png|500"></p><h2 id="工程配置信息-info-plist-路径配置"><a href="#工程配置信息-info-plist-路径配置" class="headerlink" title="工程配置信息 info.plist 路径配置"></a>工程配置信息 info.plist 路径配置</h2><ul><li>工程文件夹中，新建文件夹 xxxx ，用来存放新target的内容</li><li>复制项 plist 文件，改名 - 移动到 xxxx 文件夹下</li><li>xxxx 文件夹拖拉进项目中，如下配置<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261457811.png" alt="image.png|500"></li><li>info.plist 路径配置 `Build Settings - Packaging - info.plist file - 配置新plist的路径<br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261528871.png" alt="image.png|500"></li></ul><h2 id="配置预处理器宏，用来区分代码中的环境"><a href="#配置预处理器宏，用来区分代码中的环境" class="headerlink" title="配置预处理器宏，用来区分代码中的环境"></a>配置预处理器宏，用来区分代码中的环境</h2><p><code>Build Setting–&gt;Preprocessor Macros</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261526001.png" alt="image.png|500"><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261527657.png" alt="image.png|500"></p><h2 id="app-icon-配置"><a href="#app-icon-配置" class="headerlink" title="app icon 配置"></a>app icon 配置</h2><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261530820.png" alt="image.png|500"></p><p><code>Assets目录下 - 新建 app icon</code><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202402261531708.png" alt="image.png|500"><br>新建的target - 引用新建的app icon </p><h2 id="新建启动页面-Launch-Screen"><a href="#新建启动页面-Launch-Screen" class="headerlink" title="新建启动页面 Launch Screen"></a>新建启动页面 Launch Screen</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url: https://juejin.cn/post/6910117697317502983</span><br><span class="line">title: &quot;iOS 创建多个Target实现多渠道打包或者环境区分 - 掘金&quot;</span><br><span class="line">description: &quot;需求：一套代码可以成多个App，其中图标、启动图、名称等不一样。或者一个项目区分不同环境，不同环境安装不同的依赖库或者访问不同的服务器，或者执行的代码逻辑不同等。 1. 创建Target或者说在当前项目target基础上复制新的target 2. 修改Target、Scheme…&quot;</span><br><span class="line">host: juejin.cn</span><br><span class="line">favicon: https://lf3-cdn-tos.bytescm.com/obj/static/xitu_juejin_web/static/favicons/favicon-32x32.png</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUI 开发安卓</title>
      <link href="/posts/e719faf2.html"/>
      <url>/posts/e719faf2.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>除了Flutter和RN，还有尝试使用SwiftUI开发跨平台</p><div class="table-container"><table><thead><tr><th>开发环境</th><th>最低版本</th></tr></thead><tbody><tr><td>Xcode</td><td>15</td></tr><tr><td>Android Studio</td><td>2023</td></tr><tr><td>Homebrew</td><td>4.1.0</td></tr><tr><td>iOS</td><td>16</td></tr><tr><td>Android</td><td>29</td></tr></tbody></table></div><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p><img src="https://assets.skip.tools/diagrams/skip-diagrams-app.svg" alt="image.png"></p><ul><li>使用swift和swiftUI进行编码</li><li>使用skip转译成Kotlin</li></ul><p>运行操作完成后，SwiftUI App 将在所选的 iOS 模拟器中打开，同时转译的 App 将在当前运行的 Android 模拟器中启动</p><p><img src="https://camo.githubusercontent.com/f5e7accad91af67c48c4f320bd8c670003cbea70eea773d373159f245ea9a04a/68747470733a2f2f6173736574732e736b69702e746f6f6c732f696e74726f2f736b69705f78636f64652e706e67" alt="image.png|500"></p><h1 id="跨平台方案比较"><a href="#跨平台方案比较" class="headerlink" title="跨平台方案比较"></a>跨平台方案比较</h1><div class="table-container"><table><thead><tr><th></th><th>Skip</th><th>Flutter</th><th>React Native</th><th>Xamarin</th><th>KMP Compose</th><th>Ionic/Cordova</th></tr></thead><tbody><tr><td>Development Language</td><td>Swift</td><td>Dart</td><td>JavaScript</td><td>C#</td><td>Kotlin</td><td>JavaScript</td></tr><tr><td>UI Framework</td><td>SwiftUI</td><td>Flutter</td><td>HTML/JSX+CSS</td><td>XAML/MAUI</td><td>Compose</td><td>HTML+CSS</td></tr><tr><td>Package Manager</td><td>SwiftPM</td><td>Pub/CocoaPods</td><td>NPM</td><td>NuGet/CocoaPods</td><td>Gradle/CocoaPods</td><td>Varies</td></tr><tr><td>IDE</td><td>Xcode</td><td>Android Studio</td><td>VSCode</td><td>Visual Studio</td><td>IntelliJ IDEA</td><td>VSCode</td></tr><tr><td>iOS UX</td><td>Native</td><td>Mimicked</td><td>Native</td><td>Native</td><td>Mimicked</td><td>HTML</td></tr><tr><td>Android UX</td><td>Native</td><td>Mimicked</td><td>Native</td><td>Native</td><td>Native</td><td>HTML</td></tr><tr><td>Rendering Canvas</td><td>Native</td><td>Impeller/Skia</td><td>Flexbox</td><td>Native</td><td>Skia</td><td>WebView</td></tr><tr><td>Code Execution</td><td>Compiled</td><td>Compiled</td><td>Interpreted</td><td>Compiled</td><td>Compiled</td><td>Interpreted</td></tr><tr><td>Call Platform API</td><td>Direct</td><td>Bridged</td><td>Bridged</td><td>Bridged</td><td>Mixed</td><td>Bridged</td></tr><tr><td>Added VM/Runtime</td><td>None</td><td>Flutter Engine</td><td>Hermes</td><td>Mono</td><td>Kotlin/Native</td><td>Varies</td></tr><tr><td>Added Garbage Collector</td><td>None</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Minimum iOS App Size</td><td>100 KB</td><td>13 MB</td><td>8 MB</td><td>8 MB</td><td>16 MB</td><td>Varies</td></tr><tr><td>Minimum Android App Size</td><td>5 MB</td><td>17 MB</td><td>9 MB</td><td>8 MB</td><td>5 MB</td><td>Varies</td></tr></tbody></table></div><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>真正做到原生开发</li><li>可以随时停止使用 Skip 并自行维护 Swift 和 Kotlin 代码库</li></ul><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><ul><li>skip是2023刚创建的新框架，社区讨论度比较低</li><li>闭源项目需要付费获取许可证使用转译插件</li></ul><h1 id="skip文档"><a href="#skip文档" class="headerlink" title="skip文档"></a>skip文档</h1><p><a href="https://github.com/skiptools/skip?tab=readme-ov-file">Skip</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> SwiftUI </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 路由导航</title>
      <link href="/posts/5fe3ff63.html"/>
      <url>/posts/5fe3ff63.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>页面的跳转、管理和导航由路由统一管理<br>路由听的多的是在前端，ios为了解决组件化的解耦问题，也有引入路由的思路。</p></blockquote><h3 id="架构组件"><a href="#架构组件" class="headerlink" title="架构组件"></a>架构组件</h3><h4 id="MaterialApp"><a href="#MaterialApp" class="headerlink" title="MaterialApp"></a>MaterialApp</h4><p>页面的入口<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MaterialApp MaterialApp(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  GlobalKey&lt;NavigatorState&gt;? navigatorKey,    <span class="comment">// 导航键</span></span><br><span class="line">  GlobalKey&lt;ScaffoldMessengerState&gt;? scaffoldMessengerKey,    <span class="comment">//主要是管理 Scaffolds</span></span><br><span class="line">  Widget? home,    <span class="comment">// 应用程序默认路由的小部件,用来定义当前应用打开的时候，所显示的界面</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Widget <span class="built_in">Function</span>(BuildContext)&gt; routes = <span class="keyword">const</span> &lt;<span class="built_in">String</span>, WidgetBuilder&gt;&#123;&#125;,    <span class="comment">// 应用程序的顶级路由表</span></span><br><span class="line">  <span class="built_in">String?</span> initialRoute,    <span class="comment">// 如果构建了导航器，则显示的第一个路由的名称</span></span><br><span class="line">  Route&lt;<span class="built_in">dynamic</span>&gt;? <span class="built_in">Function</span>(RouteSettings)? onGenerateRoute,    <span class="comment">// 应用程序导航到指定路由时使用的路由生成器回调</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Route&lt;<span class="built_in">dynamic</span>&gt;&gt; <span class="built_in">Function</span>(<span class="built_in">String</span>)? onGenerateInitialRoutes,    <span class="comment">//生成初始化路由</span></span><br><span class="line">  Route&lt;<span class="built_in">dynamic</span>&gt;? <span class="built_in">Function</span>(RouteSettings)? onUnknownRoute,    <span class="comment">// 当 onGenerateRoute 无法生成路由(initialRoute除外)时调用</span></span><br><span class="line">  <span class="built_in">List</span>&lt;NavigatorObserver&gt; navigatorObservers = <span class="keyword">const</span> &lt;NavigatorObserver&gt;[],    <span class="comment">// 为该应用程序创建的导航器的观察者列表</span></span><br><span class="line">  Widget <span class="built_in">Function</span>(BuildContext, Widget?)? builder,    <span class="comment">// 应用程序的顶级路由表</span></span><br><span class="line">  <span class="built_in">String</span> title = <span class="string">&#x27;&#x27;</span>,    <span class="comment">// 设备用于为用户识别应用程序的单行描述</span></span><br><span class="line">  <span class="built_in">String</span> <span class="built_in">Function</span>(BuildContext)? onGenerateTitle,    <span class="comment">// 如果非空，则调用此回调函数来生成应用程序的标题字符串，否则使用标题。</span></span><br><span class="line">  Color? color,    <span class="comment">// 在操作系统界面中应用程序使用的主色。</span></span><br><span class="line">  ThemeData? theme,    <span class="comment">// 应用程序小部件使用的颜色。</span></span><br><span class="line">  ThemeData? darkTheme,    <span class="comment">//暗黑模式主题颜色</span></span><br><span class="line">  ThemeData? highContrastTheme,    <span class="comment">//系统请求“高对比度”使用的主题</span></span><br><span class="line">  ThemeData? highContrastDarkTheme,    <span class="comment">//系统请求“高对比度”暗黑模式下使用的主题颜色</span></span><br><span class="line">  ThemeMode? themeMode = ThemeMode.system,    <span class="comment">//使用哪种模式的主题（默认跟随系统）</span></span><br><span class="line">  <span class="built_in">Duration</span> themeAnimationDuration = kThemeAnimationDuration,    <span class="comment">//主体动画持续时间</span></span><br><span class="line">  Curve themeAnimationCurve = Curves.linear,    <span class="comment">//主体动画曲线</span></span><br><span class="line">  Locale? locale,    <span class="comment">// 此应用程序本地化小部件的初始区域设置基于此值。</span></span><br><span class="line">  <span class="built_in">Iterable</span>&lt;LocalizationsDelegate&lt;<span class="built_in">dynamic</span>&gt;&gt;? localizationsDelegates,    <span class="comment">// 这个应用程序本地化小部件的委托。</span></span><br><span class="line">  Locale? <span class="built_in">Function</span>(<span class="built_in">List</span>&lt;Locale&gt;?, <span class="built_in">Iterable</span>&lt;Locale&gt;)? localeListResolutionCallback,  <span class="comment">// 这个回调负责在应用程序启动时以及用户更改设备的区域设置时选择应用程序的区域设置。</span></span><br><span class="line">  Locale? <span class="built_in">Function</span>(Locale?, <span class="built_in">Iterable</span>&lt;Locale&gt;)? localeResolutionCallback,    <span class="comment">//监听系统语言切换事件</span></span><br><span class="line">  <span class="built_in">Iterable</span>&lt;Locale&gt; supportedLocales = <span class="keyword">const</span> &lt;Locale&gt;[Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>)],  <span class="comment">// 此应用程序已本地化的地区列表</span></span><br><span class="line">  <span class="built_in">bool</span> debugShowMaterialGrid = <span class="keyword">false</span>,  <span class="comment">// 打开绘制基线网格材质应用程序的网格纸覆盖</span></span><br><span class="line">  <span class="built_in">bool</span> showPerformanceOverlay = <span class="keyword">false</span>,  <span class="comment">// 打开性能叠加</span></span><br><span class="line">  <span class="built_in">bool</span> checkerboardRasterCacheImages = <span class="keyword">false</span>,  <span class="comment">// 打开栅格缓存图像的棋盘格</span></span><br><span class="line">  <span class="built_in">bool</span> checkerboardOffscreenLayers = <span class="keyword">false</span>,    <span class="comment">// 打开渲染到屏幕外位图的图层的棋盘格</span></span><br><span class="line">  <span class="built_in">bool</span> showSemanticsDebugger = <span class="keyword">false</span>,    <span class="comment">// 打开显示框架报告的可访问性信息的覆盖</span></span><br><span class="line">  <span class="built_in">bool</span> debugShowCheckedModeBanner = <span class="keyword">true</span>,      <span class="comment">// 在选中模式下打开一个小的“DEBUG”横幅，表示应用程序处于选中模式</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;ShortcutActivator, Intent&gt;? shortcuts,    <span class="comment">//应用程序意图的键盘快捷键的默认映射。</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">Type</span>, Action&lt;Intent&gt;&gt;? actions,    <span class="comment">//包含和定义用户操作的映射</span></span><br><span class="line">  <span class="built_in">String?</span> restorationScopeId,    <span class="comment">//应用程序状态恢复的标识符</span></span><br><span class="line">  ScrollBehavior? scrollBehavior,    <span class="comment">//统一滚动行为设置，设置后子组件将返回对应的滚动行为</span></span><br><span class="line">  <span class="built_in">bool</span> useInheritedMediaQuery = <span class="keyword">false</span>,    <span class="comment">//如果为true，则将使用继承的 MediaQuery。如果它不可用或者是错误的，那么将从窗口构建一个。默认为false。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h4><p>脚手架<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Scaffold Scaffold(&#123;</span><br><span class="line">  Key? key,</span><br><span class="line">  PreferredSizeWidget? appBar,    <span class="comment">//页面上方导航条</span></span><br><span class="line">  Widget? body,    <span class="comment">//页面容器</span></span><br><span class="line">  Widget? floatingActionButton,    <span class="comment">//悬浮按钮</span></span><br><span class="line">  FloatingActionButtonLocation? floatingActionButtonLocation,    <span class="comment">//悬浮按钮位置</span></span><br><span class="line">  FloatingActionButtonAnimator? floatingActionButtonAnimator,   <span class="comment">//悬浮按钮动画</span></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt;? persistentFooterButtons,    <span class="comment">//显示在底部导航条上方的一组按钮</span></span><br><span class="line">  AlignmentDirectional persistentFooterAlignment = AlignmentDirectional.centerEnd,  <span class="comment">//底部按钮对齐方式</span></span><br><span class="line">  Widget? drawer,    <span class="comment">//左侧菜单</span></span><br><span class="line">  <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">bool</span>)? onDrawerChanged,    <span class="comment">//左侧菜单发生变化</span></span><br><span class="line">  Widget? endDrawer,    <span class="comment">//右侧菜单</span></span><br><span class="line">  <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">bool</span>)? onEndDrawerChanged,  <span class="comment">// //右侧菜单发生变化</span></span><br><span class="line">  Widget? bottomNavigationBar,    <span class="comment">//底部导航条</span></span><br><span class="line">  Widget? bottomSheet,    <span class="comment">//一个持久停留在body下方，底部控件上方的控件</span></span><br><span class="line">  Color? backgroundColor,    <span class="comment">//背景色</span></span><br><span class="line">  <span class="built_in">bool?</span> resizeToAvoidBottomInset,    <span class="comment">//默认为 true，防止一些小组件重复</span></span><br><span class="line">  <span class="built_in">bool</span> primary = <span class="keyword">true</span>,  <span class="comment">//是否在屏幕顶部显示 Appbar, 默认为 true，Appbar 是否向上延伸到状态栏，如电池电量，时间那一栏</span></span><br><span class="line">  DragStartBehavior drawerDragStartBehavior = DragStartBehavior.start,  <span class="comment">//控制 drawer 的一些特性</span></span><br><span class="line">  <span class="built_in">bool</span> extendBody = <span class="keyword">false</span>,  <span class="comment">//body 是否延伸到底部控件</span></span><br><span class="line">  <span class="built_in">bool</span> extendBodyBehindAppBar = <span class="keyword">false</span>,  <span class="comment">//默认 false，为 true 时，body 会置顶到 appbar 后，如appbar 为半透明色，可以有毛玻璃效果</span></span><br><span class="line">  Color? drawerScrimColor,  <span class="comment">//侧滑栏拉出来时，用来遮盖主页面的颜色</span></span><br><span class="line">  <span class="built_in">double?</span> drawerEdgeDragWidth,  <span class="comment">//侧滑栏拉出来时，用来遮盖主页面的颜色</span></span><br><span class="line">  <span class="built_in">bool</span> drawerEnableOpenDragGesture = <span class="keyword">true</span>,  <span class="comment">//左侧侧滑栏是否可以滑动</span></span><br><span class="line">  <span class="built_in">bool</span> endDrawerEnableOpenDragGesture = <span class="keyword">true</span>,  <span class="comment">//右侧侧滑栏是否可以滑动</span></span><br><span class="line">  <span class="built_in">String?</span> restorationId,    <span class="comment">//状态还原标识符</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="BottomNavigationBar"><a href="#BottomNavigationBar" class="headerlink" title="BottomNavigationBar"></a>BottomNavigationBar</h4><p>类似ios中的UITabbarController<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BottomNavigationBar(&#123;</span><br><span class="line">    Key key,</span><br><span class="line">    <span class="meta">@required</span> <span class="keyword">this</span>.items,  <span class="comment">//必须有的item</span></span><br><span class="line">    <span class="keyword">this</span>.onTap,  <span class="comment">//点击事件</span></span><br><span class="line">    <span class="keyword">this</span>.currentIndex = <span class="number">0</span>,  <span class="comment">//当前选中</span></span><br><span class="line">    <span class="keyword">this</span>.elevation = <span class="number">8.0</span>,  <span class="comment">//高度</span></span><br><span class="line">    BottomNavigationBarType type,  <span class="comment">//排列方式</span></span><br><span class="line">    Color fixedColor,    <span class="comment">//&#x27;Either selectedItemColor or fixedColor can be specified, but not both&#x27;</span></span><br><span class="line">    <span class="keyword">this</span>.backgroundColor,  <span class="comment">//背景</span></span><br><span class="line">    <span class="keyword">this</span>.iconSize = <span class="number">24.0</span>,  <span class="comment">//icon大小</span></span><br><span class="line">    Color selectedItemColor,  <span class="comment">//选中颜色</span></span><br><span class="line">    <span class="keyword">this</span>.unselectedItemColor,  <span class="comment">//未选中颜色</span></span><br><span class="line">    <span class="keyword">this</span>.selectedIconTheme = <span class="keyword">const</span> IconThemeData(),</span><br><span class="line">    <span class="keyword">this</span>.unselectedIconTheme = <span class="keyword">const</span> IconThemeData(),</span><br><span class="line">    <span class="keyword">this</span>.selectedFontSize = <span class="number">14.0</span>,  <span class="comment">//选中文字大小</span></span><br><span class="line">    <span class="keyword">this</span>.unselectedFontSize = <span class="number">12.0</span>,  <span class="comment">//未选中文字大小</span></span><br><span class="line">    <span class="keyword">this</span>.selectedLabelStyle,  </span><br><span class="line">    <span class="keyword">this</span>.unselectedLabelStyle,</span><br><span class="line">    <span class="keyword">this</span>.showSelectedLabels = <span class="keyword">true</span>, <span class="comment">//是否显示选中的Item的文字</span></span><br><span class="line">    <span class="built_in">bool</span> showUnselectedLabels,  <span class="comment">//是否显示未选中的Item的问题</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><p>简单操作：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;home.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lists.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;profile.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabbarPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> TabbarPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TabbarPageState createState() =&gt; _TabbarPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TabbarPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TabbarPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _pageList = [Home(), Lists(), Profile()];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        body: _pageList[_currentIndex],</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: <span class="keyword">const</span> [</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              label: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">              icon: Icon(Icons.home),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              label: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">              icon: Icon(Icons.list),</span><br><span class="line">            ),</span><br><span class="line">            BottomNavigationBarItem(</span><br><span class="line">              label: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">              icon: Icon(Icons.perm_identity),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">          currentIndex: _currentIndex,</span><br><span class="line">          unselectedItemColor: Colors.black,</span><br><span class="line">          selectedItemColor: Colors.blue,</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              _currentIndex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202312031618161.png" alt="image.png|300"></p><h3 id="7-1-路由管理"><a href="#7-1-路由管理" class="headerlink" title="7.1 路由管理"></a>7.1 路由管理</h3><p>Flutter 中主要是两个类，Router 和 Navagitor</p><p><code>Router</code>: 页面想要被路由统一管理，要包装成Router</p><blockquote><p>An abstraction for an entry managed by a Navigator.</p></blockquote><p><code>Navagitor</code>:管理所有的Route的Widget，通过一个Stack来进行管理的</p><blockquote><p>A widget that manages a set of child widgets with a stack discipline.</p></blockquote><p><code>MaterialPageRoute</code><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MaterialPageRoute(&#123;</span><br><span class="line">  WidgetBuilder builder, <span class="comment">// 新路由实例</span></span><br><span class="line">  RouteSettings settings, <span class="comment">// 路由名称，是否初始化路有</span></span><br><span class="line">  <span class="built_in">bool</span> maintainState = <span class="keyword">true</span>, <span class="comment">// 为false，在路由没用时释放</span></span><br><span class="line">  <span class="built_in">bool</span> fullscreenDialog = <span class="keyword">false</span>, <span class="comment">//为true，新页面将会从屏幕底部滑入（模态）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>简单操作<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push(context, MaterialPageRoute(builder: (ctx) &#123;</span><br><span class="line">  <span class="keyword">return</span> Detail();</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">Navigator.pop(context);</span><br></pre></td></tr></table></figure></p><h4 id="携带参数跳转"><a href="#携带参数跳转" class="headerlink" title="携带参数跳转"></a>携带参数跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">child: <span class="keyword">const</span> Text(<span class="string">&#x27;push detail page&#x27;</span>),</span><br><span class="line">onPressed: () &#123;</span><br><span class="line">  <span class="keyword">final</span> result = Navigator.push(context, MaterialPageRoute(</span><br><span class="line">builder: (ctx) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">const</span> Detail(<span class="string">&#x27;正向传值&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line">  ));</span><br><span class="line">  result.then(</span><br><span class="line">(value) =&gt; &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">_backValue = value;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><h4 id="携带参数返回"><a href="#携带参数返回" class="headerlink" title="携带参数返回"></a>携带参数返回</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.pop(context, <span class="string">&#x27;back message&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="7-3-命名路由"><a href="#7-3-命名路由" class="headerlink" title="7.3 命名路由"></a>7.3 命名路由</h3><h4 id="注册路由表"><a href="#注册路由表" class="headerlink" title="注册路由表"></a>注册路由表</h4><p>在根页面的 <code>MaterialApp</code> 使用 <code>routes</code> 注册<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        theme: ThemeData(primaryColor: Colors.blueAccent),</span><br><span class="line">        initialRoute: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        routes: &#123;</span><br><span class="line">          <span class="string">&quot;/&quot;</span>: (context) =&gt; TabbarPage(),</span><br><span class="line">          <span class="string">&quot;detail1&quot;</span>: (context) =&gt; Detail(<span class="string">&#x27;&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        onGenerateRoute: (settings) =&gt;</span><br><span class="line">            MaterialPageRoute(builder: (context) =&gt; DetailA(<span class="string">&#x27;&#x27;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="通过路由名跳转"><a href="#通过路由名跳转" class="headerlink" title="通过路由名跳转"></a>通过路由名跳转</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Navigator.pushNamed(context, <span class="string">&#x27;detail&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h4><p><code>Navigator.pushNamed(context, &#39;detail&#39;, arguments: &#39;命名参数-正向传值&#39;);</code></p><p>Detail.dart<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">   <span class="comment">// 解析命名参数的传值</span></span><br><span class="line">   <span class="built_in">Object?</span> _data = ModalRoute.of(context)!.settings.arguments;</span><br><span class="line"></span><br><span class="line">、、、</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h4 id="拦截路由"><a href="#拦截路由" class="headerlink" title="拦截路由"></a>拦截路由</h4><p>onGenerateRoute</p><p>使用这个路由后，就要放弃使用路由表的方式</p><p>使用场景：需要特殊权限才可以查看的页面，不能直接跳转进去，需要做权限控制</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      theme: ThemeData(primaryColor: Colors.blueAccent),</span><br><span class="line">      initialRoute: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="comment">// routes: &#123;</span></span><br><span class="line">      <span class="comment">//   &quot;/&quot;: (context) =&gt; TabbarPage(),</span></span><br><span class="line">      <span class="comment">//   &quot;detail&quot;: (context) =&gt; Detail(&#x27;&#x27;),</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      onGenerateRoute: (settings) =&gt; MaterialPageRoute(builder: (context) &#123;</span><br><span class="line">        <span class="built_in">String?</span> name = settings.name;</span><br><span class="line">        <span class="comment">// 判断哪些页面需要登录</span></span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;detail&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Detail(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;login&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> Login();</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>根页面使用了 <code>MaterialApp</code> 包裹，跳转到其他的页面也使用了 <code>MaterialApp</code> ,就会出现报错：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">FlutterError</span> (<span class="title class_">Could</span> not find a generator <span class="keyword">for</span> route <span class="title class_">RouteSettings</span>(<span class="string">&quot;detail&quot;</span>, <span class="literal">null</span>) <span class="keyword">in</span> the _WidgetsAppState. <span class="title class_">Make</span> sure your root app widget has provided a way to generate <span class="variable language_">this</span> route. <span class="title class_">Generators</span> <span class="keyword">for</span> routes are searched <span class="keyword">for</span> <span class="keyword">in</span> the following <span class="attr">order</span>: <span class="number">1.</span> <span class="title class_">For</span> the <span class="string">&quot;/&quot;</span> route, the <span class="string">&quot;home&quot;</span> property, <span class="keyword">if</span> non-<span class="literal">null</span>, is used. <span class="number">2.</span> <span class="title class_">Otherwise</span>, the <span class="string">&quot;routes&quot;</span> table is used, <span class="keyword">if</span> it has an entry <span class="keyword">for</span> the route. <span class="number">3.</span> <span class="title class_">Otherwise</span>, onGenerateRoute is called. <span class="title class_">It</span> should <span class="keyword">return</span> a non-<span class="literal">null</span> value <span class="keyword">for</span> any valid route not handled by <span class="string">&quot;home&quot;</span> and <span class="string">&quot;routes&quot;</span>. <span class="number">4.</span> <span class="title class_">Finally</span> <span class="keyword">if</span> all <span class="keyword">else</span> fails onUnknownRoute is called. <span class="title class_">Unfortunately</span>, onUnknownRoute was not set.)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 常用的Widget</title>
      <link href="/posts/b53591ec.html"/>
      <url>/posts/b53591ec.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Text"><a href="#1-Text" class="headerlink" title="1.Text"></a>1.Text</h2><ul><li>文本Widget</li><li>类似iOS中的UILabel<h3 id="1-1-普通文本"><a href="#1-1-普通文本" class="headerlink" title="1.1 普通文本"></a>1.1 普通文本</h3></li></ul><p>控制显示的分成两类：</p><ul><li><strong>控制文本布局的参数：</strong> 如文本对齐方式 textAlign、文本排版方向 textDirection，文本显示最大行数 maxLines、文本截断规则 overflow 等等，这些都是构造函数中的参数；   </li><li><strong>控制文本样式的参数：</strong> 如字体名称 fontFamily、字体大小 fontSize、文本颜色 color、文本阴影 shadows 等等，这些参数被统一封装到了构造函数中的参数 style 中</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&quot;《定风波》 苏轼 \n莫听穿林打叶声，何妨吟啸且徐行。\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&quot;</span>,</span><br><span class="line">      style: TextStyle(fontSize: <span class="number">20</span>, color: Color.fromARGB(<span class="number">255</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">113</span>)),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310190754477.png" alt="image.png|500"></p><h3 id="1-2-富文本"><a href="#1-2-富文本" class="headerlink" title="1.2 富文本"></a>1.2 富文本</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text.rich(</span><br><span class="line">      TextSpan(</span><br><span class="line">        children: [</span><br><span class="line">          TextSpan(</span><br><span class="line">              text: <span class="string">&quot;《定风波》&quot;</span>,</span><br><span class="line">              style: TextStyle(</span><br><span class="line">                  fontSize: <span class="number">25</span>,</span><br><span class="line">                  fontWeight: FontWeight.bold,</span><br><span class="line">                  color: Colors.black)),</span><br><span class="line">          TextSpan(</span><br><span class="line">              text: <span class="string">&quot;苏轼&quot;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">18</span>, color: Colors.redAccent)),</span><br><span class="line">          TextSpan(text: <span class="string">&quot;\n莫听穿林打叶声，何妨吟啸且徐行。\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。&quot;</span>)</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      style: TextStyle(fontSize: <span class="number">20</span>, color: Colors.purple),</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310190755820.png" alt="image.png|500"></p><h2 id="2-Button"><a href="#2-Button" class="headerlink" title="2.Button"></a>2.Button</h2><h3 id="2-1-默认样式"><a href="#2-1-默认样式" class="headerlink" title="2.1 默认样式"></a>2.1 默认样式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Text(<span class="string">&#x27;漂浮按钮，它默认带有阴影和灰色背景。按下后，阴影会变大&#x27;</span>),</span><br><span class="line">        ElevatedButton(onPressed: () &#123;&#125;, child: Text(<span class="string">&#x27;漂浮按钮&#x27;</span>)),</span><br><span class="line">        Text(<span class="string">&#x27;文本按钮，默认背景透明并不带阴影。按下后，会有背景色&#x27;</span>),</span><br><span class="line">        TextButton(onPressed: () &#123;&#125;, child: Text(<span class="string">&#x27;文本按钮&#x27;</span>)),</span><br><span class="line">        Text(<span class="string">&#x27;默认有一个边框，不带阴影且背景透明。按下后，边框颜色会变亮、同时出现背景和阴影(较弱)&#x27;</span>),</span><br><span class="line">        OutlinedButton(onPressed: () &#123;&#125;, child: Text(<span class="string">&#x27;边框按钮&#x27;</span>)),</span><br><span class="line">        Text(<span class="string">&#x27;可点击的Icon，不包括文字，默认没有背景，点击后会出现背景&#x27;</span>),</span><br><span class="line">        IconButton(onPressed: () &#123;&#125;, icon: Icon(Icons.thumb_up)),</span><br><span class="line">        Text(</span><br><span class="line">            <span class="string">&#x27;ElevatedButton、TextButton、OutlinedButton都有一个icon 构造函数，通过它可以轻松创建带图标的按钮&#x27;</span>),</span><br><span class="line">        ElevatedButton.icon(</span><br><span class="line">          icon: Icon(Icons.send),</span><br><span class="line">          label: Text(<span class="string">&quot;发送&quot;</span>),</span><br><span class="line">          onPressed: _onPressed,</span><br><span class="line">        ),</span><br><span class="line">        OutlinedButton.icon(</span><br><span class="line">          icon: Icon(Icons.add),</span><br><span class="line">          label: Text(<span class="string">&quot;添加&quot;</span>),</span><br><span class="line">          onPressed: _onPressed,</span><br><span class="line">        ),</span><br><span class="line">        TextButton.icon(</span><br><span class="line">          icon: Icon(Icons.info),</span><br><span class="line">          label: Text(<span class="string">&quot;详情&quot;</span>),</span><br><span class="line">          onPressed: _onPressed,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310190753502.png" alt="image.png|500"></p><h3 id="2-2-自定义样式"><a href="#2-2-自定义样式" class="headerlink" title="2.2 自定义样式"></a>2.2 自定义样式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> RawMaterialButton(</span><br><span class="line">      fillColor: Colors.deepOrange,</span><br><span class="line">      splashColor: Colors.orange, <span class="comment">// 背景色</span></span><br><span class="line">      padding: EdgeInsets.only(left: <span class="number">20</span>, right: <span class="number">20</span>), <span class="comment">// 左右内容边距</span></span><br><span class="line">      child: Row(</span><br><span class="line">        mainAxisSize: MainAxisSize.min,</span><br><span class="line">        children: [</span><br><span class="line">          Icon(Icons.add, color: Colors.yellow), <span class="comment">// 左右➕</span></span><br><span class="line">          SizedBox( <span class="comment">// 图片和文字边距</span></span><br><span class="line">            width: <span class="number">10</span>,</span><br><span class="line">          ),</span><br><span class="line">          Text( <span class="comment">// 文本信息</span></span><br><span class="line">            <span class="string">&quot;自定义按钮&quot;</span>,</span><br><span class="line">            style: TextStyle(color: Colors.white),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      shape: StadiumBorder(), <span class="comment">// 阴影</span></span><br><span class="line">      onPressed: _onPressed,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310190751092.png" alt="image.png|500"></p><h2 id="3-Image"><a href="#3-Image" class="headerlink" title="3.Image"></a>3.Image</h2><ul><li>加载本地图片</li><li>加载网络图片</li></ul><h3 id="3-1-加载本地图片"><a href="#3-1-加载本地图片" class="headerlink" title="3.1 加载本地图片"></a>3.1 加载本地图片</h3><p>1.工程目录下新建文件夹 <code>images</code><br>2.pubspec.yaml 配置方式，asserts 要注意缩进，可以声明图片等相对目录，也可以声明图片文件夹<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">assets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">images/</span>    <span class="comment"># 声明图片文件夹，该文件夹下的图片都会被声明</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">images/avatar.png</span> <span class="comment"># 声明图片相对路径</span></span><br></pre></td></tr></table></figure></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Image.asset(<span class="string">&#x27;images/avatar.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310190748451.png" alt="image.png|500"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">        color: Colors.yellow,</span><br><span class="line">        child: Image.asset(<span class="string">&quot;images/avatar.png&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-加载网络图片"><a href="#3-2-加载网络图片" class="headerlink" title="3.2 加载网络图片"></a>3.2 加载网络图片</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Image(&#123;  </span><br><span class="line">...  </span><br><span class="line"><span class="keyword">this</span>.width, <span class="comment">//图片的宽  </span></span><br><span class="line"><span class="keyword">this</span>.height, <span class="comment">//图片高度  </span></span><br><span class="line"><span class="keyword">this</span>.color, <span class="comment">//图片的混合色值  </span></span><br><span class="line"><span class="keyword">this</span>.colorBlendMode, <span class="comment">//混合模式  </span></span><br><span class="line"><span class="keyword">this</span>.fit,<span class="comment">//缩放模式  </span></span><br><span class="line"><span class="keyword">this</span>.alignment = Alignment.center, <span class="comment">//对齐方式  </span></span><br><span class="line"><span class="keyword">this</span>.repeat = ImageRepeat.noRepeat, <span class="comment">//重复方式  </span></span><br><span class="line">...  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310190802866.png" alt="image.png|500"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// image 网络图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        height: <span class="number">300</span>,</span><br><span class="line">        color: Colors.yellow,</span><br><span class="line">        child: Image.network(</span><br><span class="line">          <span class="string">&quot;https://tva1.sinaimg.cn/large/006y8mN6gy1g72j6nk1d4j30u00k0n0j.jpg&quot;</span>,</span><br><span class="line">          alignment: Alignment.topCenter,</span><br><span class="line">          repeat: ImageRepeat.repeatY,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          colorBlendMode: BlendMode.colorDodge,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-TextField"><a href="#4-TextField" class="headerlink" title="4.TextField"></a>4.TextField</h2><h3 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h3><p><strong>常见的属性</strong></p><ul><li>keyboardType：键盘的类型</li><li>style：设置样式</li><li>textAlign：文本对齐方式</li><li>maxLength：最大显示行数</li><li>decoration：用于设置输入框相关的样式</li><li>icon：设置左边显示的图标</li><li>labelText：在输入框上面显示一个提示的文本</li><li>hintText：显示提示的占位文字</li><li>border：输入框的边框，默认底部有一个边框，可以通过InputBorder.none删除掉</li><li>filled：是否填充输入框，默认为false</li><li>fillColor：输入框填充的颜色</li><li>controller：<ul><li>onChanged：监听输入框内容的改变，传入一个回调函数</li><li>onSubmitted：点击键盘中右下角的down时，会回调的一个函数</li></ul></li></ul><p>这是一些简单的属性，其他用到的时候可以再查</p><h3 id="4-2-获取变量的方式"><a href="#4-2-获取变量的方式" class="headerlink" title="4.2 获取变量的方式"></a>4.2 获取变量的方式</h3><ol><li>定义两个变量，用于保存用户名和密码，然后在<code>onChange</code>触发时，各自保存一下输入内容。</li><li>自定义 <code>controller</code>直接获取</li></ol><p><strong>controller的作用</strong></p><ul><li>为绑定的输入框 TextField 预设内容  </li><li>获取 TextField 中输入的内容  </li><li>兼听文字输入变化与焦点变化</li></ul><p>如果没有自定义 controller ，内部会自动生成一个 TextEditingController</p><p>textfield 内部实现<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">     <span class="keyword">super</span>.initState();</span><br><span class="line">    _selectionGestureDetectorBuilder = _TextFieldSelectionGestureDetectorBuilder(state: <span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (widget.controller == <span class="keyword">null</span>) &#123;</span><br><span class="line">      _createLocalController();</span><br><span class="line">    &#125;</span><br><span class="line">    _effectiveFocusNode.canRequestFocus = widget.canRequestFocus &amp;&amp; _isEnabled;</span><br><span class="line">    _effectiveFocusNode.addListener(_handleFocusChanged);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>例子</strong><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeBody</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">20</span>),</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[TextFieldDemo()],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextFieldDemo</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TextFieldDemoState createState() =&gt; _TextFieldDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TextFieldDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TextFieldDemo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> textEditingController = TextEditingController();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.设置默认值</span></span><br><span class="line">    textEditingController.text = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.监听文本框</span></span><br><span class="line">    textEditingController.addListener(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;textEditingController:<span class="subst">$&#123;textEditingController.text&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> TextField(</span><br><span class="line">      decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">          icon: Icon(Icons.people),</span><br><span class="line">          labelText: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">          hintText: <span class="string">&quot;请输入用户名&quot;</span>,</span><br><span class="line">          border: InputBorder.none,</span><br><span class="line">          filled: <span class="keyword">true</span>,</span><br><span class="line">          fillColor: Colors.lightGreen),</span><br><span class="line">      keyboardType: TextInputType.name,</span><br><span class="line">      controller: textEditingController,</span><br><span class="line">      onChanged: (value) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;onChanged:<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      onSubmitted: (value) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;onSubmitted:<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310200757428.png" alt="image.png|500"></p><h2 id="5-Form"><a href="#5-Form" class="headerlink" title="5.Form"></a>5.Form</h2><ul><li>Form表单也是一个Widget，可以在里面放入我们的输入框。</li><li>但是Form表单中输入框必须是FormField类型的<ul><li>我们查看刚刚学过的TextField是继承自StatefulWidget，并不是一个FormField类型；</li><li>我们可以使用TextFormField，它的使用类似于TextField，并且是继承自FormField的；</li></ul></li></ul><h3 id="5-1-保存和获取表单数据"><a href="#5-1-保存和获取表单数据" class="headerlink" title="5.1 保存和获取表单数据"></a>5.1 保存和获取表单数据</h3><p><strong>在Flutter如何可以获取一个通过一个引用获取一个StatefulWidget的State对象呢？</strong><br>通过绑定一个GlobalKey即可</p><p><code>final registerFormKey = GlobalKey&lt;FormState&gt;();</code></p><h3 id="5-2-验证输入内容"><a href="#5-2-验证输入内容" class="headerlink" title="5.2 验证输入内容"></a>5.2 验证输入内容</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">、、、省略</span><br><span class="line"></span><br><span class="line">registerFormKey.currentState?.validate();</span><br><span class="line"></span><br><span class="line">、、、省略</span><br><span class="line"></span><br><span class="line">validator: (value) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value!.isEmpty) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;内容不能为空&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 验证通过</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">、、、</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例</strong><br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">lass MyHomeBody <span class="keyword">extends</span> StatefulWidget &#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomeBody(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="comment">// ignore: library_private_types_in_public_api</span></span><br><span class="line">  _FormDemoState createState() =&gt; _FormDemoState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_FormDemoState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomeBody</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> registerFormKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line">  <span class="keyword">late</span> <span class="built_in">String</span> username, password;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> registerForm() &#123;</span><br><span class="line">    registerFormKey.currentState?.save();</span><br><span class="line">    registerFormKey.currentState?.validate();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;username:<span class="subst">$username</span> password:<span class="subst">$password</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Form(</span><br><span class="line">      key: registerFormKey,</span><br><span class="line">      child: Column(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          TextFormField(</span><br><span class="line">            decoration: <span class="keyword">const</span> InputDecoration(</span><br><span class="line">                icon: Icon(Icons.people), labelText: <span class="string">&quot;用户名或手机号&quot;</span>),</span><br><span class="line">            onSaved: (value) &#123;</span><br><span class="line">              username = value!;</span><br><span class="line">            &#125;,</span><br><span class="line">            validator: (value) &#123;</span><br><span class="line">              <span class="keyword">if</span> (value!.isEmpty) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;内容不能为空&quot;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 验证通过</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          TextFormField(</span><br><span class="line">            obscureText: <span class="keyword">true</span>,</span><br><span class="line">            decoration:</span><br><span class="line">                <span class="keyword">const</span> InputDecoration(icon: Icon(Icons.lock), labelText: <span class="string">&quot;密码&quot;</span>),</span><br><span class="line">            onSaved: (value) &#123;</span><br><span class="line">              password = value!;</span><br><span class="line">            &#125;,</span><br><span class="line">            validator: (value) &#123;</span><br><span class="line">              <span class="keyword">if</span> (value!.isEmpty) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;内容不能为空&quot;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 验证通过</span></span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          <span class="keyword">const</span> SizedBox(</span><br><span class="line">            height: <span class="number">50</span>,</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">// ignore: sized_box_for_whitespace</span></span><br><span class="line">          Container(</span><br><span class="line">            width: <span class="built_in">double</span>.infinity,</span><br><span class="line">            height: <span class="number">44</span>,</span><br><span class="line">            child: ElevatedButton(</span><br><span class="line">              onPressed: registerForm,</span><br><span class="line">              child: <span class="keyword">const</span> Text(</span><br><span class="line">                <span class="string">&quot;注 册&quot;</span>,</span><br><span class="line">                style: TextStyle(fontSize: <span class="number">20</span>, color: Colors.white),</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310200831483.png" alt="image.png|500"></p><p><img src="https://raw.githubusercontent.com/zenghuayang/resources/master/202310200840593.png" alt="image.png|500"></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS Crash信息</title>
      <link href="/posts/1740ba26.html"/>
      <url>/posts/1740ba26.html</url>
      
        <content type="html"><![CDATA[<p>test</p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xcode15 编译、运行报错</title>
      <link href="/posts/f5640490.html"/>
      <url>/posts/f5640490.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-link问题"><a href="#1-link问题" class="headerlink" title="1.link问题"></a>1.link问题</h1><h2 id="1-1-现象："><a href="#1-1-现象：" class="headerlink" title="1.1 现象："></a>1.1 现象：</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">malloc: Heap corruption detected, free list is damaged at <span class="number">0x28032c400</span></span><br><span class="line">*** Incorrect guard value: <span class="number">1297437786</span></span><br><span class="line">malloc: *** set a breakpoint <span class="keyword">in</span> malloc_error_break to debug</span><br></pre></td></tr></table></figure><h2 id="1-2-解决："><a href="#1-2-解决：" class="headerlink" title="1.2 解决："></a>1.2 解决：</h2><p>在<code>Project-&gt;target-&gt;Build Settings-&gt;Other linker Flags</code> 路径下，添加 <code>-ld64</code></p><h2 id="1-3-参考："><a href="#1-3-参考：" class="headerlink" title="1.3 参考："></a>1.3 参考：</h2><p><a href="https://forums.developer.apple.com/forums/thread/731089">Xcode 15 linking error</a><br><a href="https://juejin.cn/post/7292948455549566988">Xcode15及低版本 -ld64适配</a></p>]]></content>
      
      
      <categories>
          
          <category> 移动开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo blog</title>
      <link href="/posts/9f0c1b55.html"/>
      <url>/posts/9f0c1b55.html</url>
      
        <content type="html"><![CDATA[<p>hexo + github page 搭建个人博客说明<br>使用 github action 持续集成ci</p><p>思路：<br>1.搭建两个git仓库，一个是部署仓库 一个是源码仓库<br>2.修改内容 push 到源码仓库，使用action同步到部署仓库</p><p>参考链接：<br><a href="https://www.cnblogs.com/mfrank/p/12829882.html">【Hexo】使用Hexo+github pages+travis ci 实现自动化部署</a><br><a href="https://blog.anheyu.com/posts/asdx.html">使用 Github Action 自动部署</a><br><a href="https://www.bilibili.com/video/BV1nd4y1A7Wt/?spm_id_from=333.788">留言板</a><br><a href="https://kemushi54.github.io/2019/04/01/%E7%AD%86%E8%A8%98-%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84-blog%EF%BC%8CHexo-Github-%E4%B9%8B%E4%BA%8C/">分类和标签</a><br><a href="https://blog.anheyu.com/posts/sdxhu.html">插件配置</a><br><a href="https://twikoo.js.org/">文章评论</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
